Microsoft (R) Macro Assembler Version 14.42.34435.0	    12/22/24 22:03:59
main.asm						     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data
				; Define BoxSize
 = 0000000F			MarginSize = 15 ; Margin size
 = 00000082			ScreenWidth = 130
 = 0000001E			ScreenHeight = 30

				; Define airplane
 00000000 20 20 20 20 20	airplaneDraw1 BYTE ' ', ' ', ' ', ' ', ' ', '/', 5ch, 0
	   2F 5C 00
 00000008 20 20 5F 5F 2F	airplaneDraw2 BYTE ' ', ' ', '_', '_', '/', ' ', ' ', 5ch, '_', '_', 0
	   20 20 5C 5F 5F
	   00
 00000013 2F 5F 5F 5F 5F	airplaneDraw3 BYTE '/', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 5ch, 0
	   5F 5F 5F 5F 5F
	   5F 5C 00
 00000020 20 20 20 20 7C	airplaneDraw4 BYTE  ' ',' ',' ', ' ', '|', ' ', ' ', '|', 0
	   20 20 7C 00
 00000029 20 20 20 2F 5F	airplaneDraw5 BYTE  ' ',' ', ' ', '/', '_', '|', '|', '_', 5ch, 0
	   7C 7C 5F 5C 00
 00000033 2A			bullet BYTE '*'
 00000034 0041 001C		initialAirplanePos COORD <ScreenWidth / 2, ScreenHeight - 2>
 00000038 0041 001C		airplanePos COORD <ScreenWidth / 2, ScreenHeight - 2>
 0000003C 0000 0000		bulletPos COORD <0, 0>

				; Define enemies
 00000040 20 5F 5F 5F 5F	enemyShape1draw1 BYTE ' ______', 0
	   5F 5F 00
 00000048 7C 20 4F 20 20	enemyShape1draw2 BYTE '| O  O |', 0
	   4F 20 7C 00
 00000051 7C 20 20 3C 3E	enemyShape1draw3 BYTE '|  <>  |', 0
	   20 20 7C 00
 0000005A 7C 20 20 5C 2F	enemyShape1draw4 BYTE '|  \/  |', 0
	   20 20 7C 00
 00000063 7C 5F 5F 5F 5F	enemyShape1draw5 BYTE '|______|', 0
	   5F 5F 7C 00

 0000006C 20 20 5F 5F 5F	enemyShape2draw1 BYTE '  _____', 0
	   5F 5F 00
 00000074 20 2F 20 20 20	enemyShape2draw2 BYTE ' /     \ ', 0
	   20 20 5C 20 00
 0000007E 7C 20 20 20 20	enemyShape2draw3 BYTE '|       |', 0
	   20 20 20 7C 00
 00000088 20 5C 5F 5F 5F	enemyShape2draw4 BYTE ' \_____/ ', 0
	   5F 5F 2F 20 00
 00000092 20 20 28 20 20	enemyShape2draw5 BYTE '  (   )', 0
	   20 29 00

 0000009A 20 20 20 28 20	enemyShape3draw1 BYTE '   ( )   ', 0
	   29 20 20 20 00
 000000A4 20 2F 20 20 20	enemyShape3draw2 BYTE ' /     \ ', 0
	   20 20 5C 20 00
 000000AE 7C 20 20 20 2A	enemyShape3draw3 BYTE '|   *   | ', 0
	   20 20 20 7C 20
	   00
 000000B9 20 5C 20 20 20	enemyShape3draw4 BYTE ' \     / ', 0
	   20 20 2F 20 00
 000000C3 20 20 5C 5F 5F	enemyShape3draw5 BYTE '  \___/ ' , 0
	   5F 2F 20 00


 000000CC 20 5F 5F 5F 5F	enemyShape4draw1 BYTE ' _______', 0
	   5F 5F 5F 00
 000000D5 7C 20 20 4F 20	enemyShape4draw2 BYTE '|  O O  |', 0
	   4F 20 20 7C 00
 000000DF 7C 20 20 20 5E	enemyShape4draw3 BYTE '|   ^   |', 0
	   20 20 20 7C 00
 000000E9 7C 20 20 5C 5F	enemyShape4draw4 BYTE '|  \_/  |', 0
	   2F 20 20 7C 00
 000000F3 20 5C 5F 5F 5F	enemyShape4draw5 BYTE ' \_____/ ', 0
	   5F 5F 2F 20 00


 000000FD 6F			enemyBullet1 BYTE 'o'
 000000FE 6F			enemyBullet2 BYTE 'o'
 000000FF 6F			enemyBullet3 BYTE 'o'
 00000100 6F			enemyBullet4 BYTE 'o'

				; Define enemy positions and bullets
 00000101 001A 0007		enemyPos1 COORD <26, 7>
 00000105 001E 0005		enemyBulletPos1 COORD <30, 5>
 00000109 002E 0007		enemyPos2 COORD <46, 7>
 0000010D 0032 0005		enemyBulletPos2 COORD <50, 5>
 00000111 004C 0007		enemyPos3 COORD <76, 7>
 00000115 0050 0005		enemyBulletPos3 COORD <80, 5>
 00000119 0060 0007		enemyPos4 COORD <96, 7>
 0000011D 0064 0005		enemyBulletPos4 COORD <100, 5>
 00000121 01			enemyActive1 BYTE 1
 00000122 01			enemyActive2 BYTE 1
 00000123 01			enemyActive3 BYTE 1
 00000124 01			enemyActive4 BYTE 1

				;Define boundary
 00000125 7C 7C			boundary BYTE '||'
 00000127 000D 0000		boundaryPosLeft COORD <13, 0>
 0000012B 0000 0000		boundaryPosRight COORD <0 , 0>
 0000012F 00			boundaryDrawn BYTE 0

				;addLife
 00000130 24			addLife BYTE '$'
 00000131 0019 0005		addLifePos COORD <25 , 5>  
 00000135 00A9			addLifeColor WORD 0A9h     
 00000137 0021 0055 0070	dropPos WORD 33,85,112,78,90,35,110,17
	   004E 005A 0023
	   006E 0011
 00000147 0000			flag WORD 0

				;bomb (minus 2 life)
 00000149 23			bomb BYTE '#'
 0000014A 004D 0005		bombPos COORD <77 , 5>  
 0000014E 00C9			bombColor WORD 0C9h     
 00000150 0042 002C 0021	dropBombPos WORD 66,44,33,99,41,28,100,50
	   0063 0029 001C
	   0064 0032
 00000160 0000			flagBomb WORD 0

				;bomb2 (minus 1 life)
 00000162 21			bomb2 BYTE '!'
 00000163 0014 0005		bombPos2 COORD <20 , 5>  
 00000167 00E9			bombColor2 WORD 0E9h    
 00000169 002C 0037 0016	dropBombPos2 WORD 44,55,22,99,88,101,66,77
	   0063 0058 0065
	   0042 004D
 00000179 0000			flagBomb2 WORD 0

				; Define "WIN!" 
 0000017B 0037 000F		winPos COORD <55,15>
 0000017F 5F 5F 20 20 20	winDraw1 BYTE '_','_',' ',' ',' ',' ',' ',' ',' ',' ','_','_','_','_','_',' ','_',' ',' ',' ','_',' ',' ',' ','_',0 
	   20 20 20 20 20
	   5F 5F 5F 5F 5F
	   20 5F 20 20 20
	   5F 20 20 20 5F
	   00
 00000199 5C 20 5C 20 20	winDraw2 BYTE 5ch,' ',5ch,' ',' ',' ',' ',' ',' ','/',' ','/','_',' ','_',7ch,' ',5ch,' ',7ch,' ',7ch,' ',7ch,' ',7ch,0
	   20 20 20 20 2F
	   20 2F 5F 20 5F
	   7C 20 5C 20 7C
	   20 7C 20 7C 20
	   7C 00
 000001B4 20 5C 20 5C 20	winDraw3 BYTE ' ',5ch,' ',5ch,' ','/',5ch,' ','/',' ','/',' ',7ch,' ',7ch,7ch,' ',' ',5ch,7ch,' ',7ch,' ',7ch,' ',7ch,0
	   2F 5C 20 2F 20
	   2F 20 7C 20 7C
	   7C 20 20 5C 7C
	   20 7C 20 7C 20
	   7C 00
 000001CF 20 20 5C 20 56	winDraw4 BYTE ' ',' ',5ch,' ','V',' ',' ','V',' ','/',' ',' ',7ch,' ',7ch,7ch,' ',7ch,5ch,' ',' ',7ch,' ',7ch,'_',7ch,0
	   20 20 56 20 2F
	   20 20 7C 20 7C
	   7C 20 7C 5C 20
	   20 7C 20 7C 5F
	   7C 00
 000001EA 20 20 20 5C 5F	winDraw5 BYTE ' ',' ',' ',5ch,'_','/',5ch,'_','/',' ',' ',7ch,'_','_','_',7ch,'_',7ch,' ',5ch,'_',7ch,' ','(','_',')',0
	   2F 5C 5F 2F 20
	   20 7C 5F 5F 5F
	   7C 5F 7C 20 5C
	   5F 7C 20 28 5F
	   29 00

				; Define "LOSE"
 00000205 0037 000F		losePos COORD <55,15>
 00000209 20 5F 20 20 20	loseDraw1 BYTE ' ','_',' ',' ',' ',' ',' ','_','_','_',' ',' ','_','_','_','_',' ',' ','_','_','_','_','_',' ',' ',' ','_',' ',0
	   20 20 5F 5F 5F
	   20 20 5F 5F 5F
	   5F 20 20 5F 5F
	   5F 5F 5F 20 20
	   20 5F 20 00
 00000226 7C 20 7C 20 20	loseDraw2 BYTE '|',' ',7ch,' ',' ',' ','/',' ','_',' ',5ch,'/',' ','_','_','_',7ch,7ch,' ','_','_','_','_',7ch,' ',7ch,' ',7ch,0
	   20 2F 20 5F 20
	   5C 2F 20 5F 5F
	   5F 7C 7C 20 5F
	   5F 5F 5F 7C 20
	   7C 20 7C 00
 00000243 7C 20 7C 20 20	loseDraw3 BYTE '|',' ',7ch,' ',' ',7ch,' ',7ch,' ',7ch,' ',5ch,'_','_','_',' ',5ch,7ch,' ',' ','_',7ch,' ',' ',' ',7ch,' ',7ch,0
	   7C 20 7C 20 7C
	   20 5C 5F 5F 5F
	   20 5C 7C 20 20
	   5F 7C 20 20 20
	   7C 20 7C 00
 00000260 7C 20 7C 5F 5F	loseDraw4 BYTE '|',' ',7ch,'_','_',7ch,' ',7ch,'_',7ch,' ',7ch,'_','_','_',')',' ',7ch,' ',7ch,'_','_','_',' ',' ',7ch,'_',7ch,0
	   7C 20 7C 5F 7C
	   20 7C 5F 5F 5F
	   29 20 7C 20 7C
	   5F 5F 5F 20 20
	   7C 5F 7C 00
 0000027D 7C 5F 5F 5F 5F	loseDraw5 BYTE '|','_','_','_','_','_',5ch,'_','_','_','/',7ch,'_','_','_','_','/',7ch,'_','_','_','_','_',7ch,' ','(','_',')',0
	   5F 5C 5F 5F 5F
	   2F 7C 5F 5F 5F
	   5F 2F 7C 5F 5F
	   5F 5F 5F 7C 20
	   28 5F 29 00


				; Define others
 0000029A 00000000		outputHandle DWORD 0
 0000029E 00000000		bytesWritten DWORD 0
 000002A2 0082 001E		screenBuffer COORD <130,30>
 000002A6 00000000		count DWORD 0

				; Define lives
 000002AA 00000003		life DWORD 3
 000002AE 48 50 3A 03 00	lifeSymbol1 BYTE 'H','P',':',03h,0
 000002B3 48 50 3A 03 03	lifeSymbol2 BYTE 'H','P',':',03h, 03h, 0
	   00
 000002B9 48 50 3A 03 03	lifeSymbol3 BYTE 'H','P',':',03h, 03h, 03h, 0
	   03 00
 000002C0 0005 0003		lifePos COORD <5, 3>

 = start@0			main EQU start@0

 00000000			.code
				SetConsoleOutputCP PROTO STDCALL :DWORD
				GetAsyncKeyState PROTO STDCALL :DWORD
				Random PROTO min:WORD, max:WORD


 00000000			main PROC
				    ; Initialize console
				    INVOKE SetConsoleOutputCP, 65001 ; Set console output to UTF-8
				    INVOKE GetStdHandle, STD_OUTPUT_HANDLE
 00000011  A3 0000029A R	    mov outputHandle, eax
 00000016  E8 00000000 E	    call Clrscr
					
				    ; Main game loop
 0000001B			    gameLoop:
				        ; Clear screen
 0000001B  E8 00000000 E	        call Clrscr
						
						;Draw boundary
 00000020  66| C7 05				mov boundaryPosRight.x, ScreenWidth - 13
	   0000012B R
	   0075
 00000029  66| C7 05				mov boundaryPosLeft.y,3
	   00000129 R
	   0003
 00000032  66| C7 05				mov boundaryPosRight.y,3
	   0000012D R
	   0003
						
 0000003B					DrawBoundaryLeft:
							INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR boundary, 2, boundaryPosLeft, ADDR count
 00000058  66| FF 05					inc boundaryPosLeft.y
	   00000129 R
 0000005F  66| 83 3D					cmp boundaryPosLeft.y, ScreenHeight-2
	   00000129 R 1C
 00000067  7D 02					jge DrawBoundaryRight
 00000069  EB D0					jmp DrawBoundaryLeft
						
 0000006B					DrawBoundaryRight:
							INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR boundary, 2, boundaryPosRight, ADDR count
 00000088  66| FF 05					inc boundaryPosRight.y
	   0000012D R
 0000008F  66| 83 3D					cmp boundaryPosRight.y, ScreenHeight-2
	   0000012D R 1C
 00000097  7D 02					jge EndBoundaryDrawing
 00000099  EB D0					jmp DrawBoundaryRight
							
 0000009B					EndBoundaryDrawing:
						
				        ; Draw life
 0000009B  83 3D 000002AA R	        cmp life, 3
	   03
 000000A2  74 12		        je drawlife3
 000000A4  83 3D 000002AA R	        cmp life, 2
	   02
 000000AB  74 28		        je drawlife2
 000000AD  83 3D 000002AA R	        cmp life, 1
	   01
 000000B4  74 3E		        je drawlife1

				    ; Draw life
 000000B6			    drawlife3:
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR lifeSymbol3, 6, lifePos, ADDR count
 000000D3  EB 3E		        jmp drawAirplane
 000000D5			    drawlife2:
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR lifeSymbol2, 5, lifePos, ADDR count
 000000F2  EB 1F		        jmp drawAirplane
 000000F4			    drawlife1:
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR lifeSymbol1, 4, lifePos, ADDR count
 00000111  EB 00		        jmp drawAirplane
					
					

				    ; Draw airplane
 00000113			    drawAirplane:
				        INVOKE WriteConsoleOutputCharacter,
				               outputHandle, ADDR airplaneDraw5, LENGTHOF airplaneDraw5, airplanePos, ADDR count
 00000130  66| FF 0D		        dec airplanePos.y
	   0000003A R
				        INVOKE WriteConsoleOutputCharacter,
				               outputHandle, ADDR airplaneDraw4, LENGTHOF airplaneDraw4, airplanePos, ADDR count
 00000154  66| FF 0D		        dec airplanePos.y
	   0000003A R
				        INVOKE WriteConsoleOutputCharacter,
				               outputHandle, ADDR airplaneDraw3, LENGTHOF airplaneDraw3, airplanePos, ADDR count
 00000178  66| FF 0D		        dec airplanePos.y
	   0000003A R
				        INVOKE WriteConsoleOutputCharacter,
				               outputHandle, ADDR airplaneDraw2, LENGTHOF airplaneDraw2, airplanePos, ADDR count
 0000019C  66| FF 0D		        dec airplanePos.y
	   0000003A R
				        INVOKE WriteConsoleOutputCharacter,
				               outputHandle, ADDR airplaneDraw1, LENGTHOF airplaneDraw1, airplanePos, ADDR count
 000001C0  66| FF 0D		        dec airplanePos.y
	   0000003A R
 000001C7  66| 83 05		        add airplanePos.y, 5 ; Add back 5 to airplanePos.y
	   0000003A R 05
							

				        ; Draw my bullet if active
 000001CF  66| 83 3D		        cmp bulletPos.y, 0
	   0000003E R 00
 000001D7  74 1D		        je skipBullet
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR bullet, 1, bulletPos, ADDR count
 000001F6			    skipBullet:
					
					

				        ; Draw enemies and their bullets
 000001F6			    drawenemy1:
 000001F6  80 3D 00000121 R	        cmp enemyActive1, 0 ; Check if enemy is active 
	   00
 000001FD  0F 84 000000FE	        je drawEnemy2
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape1draw5, LENGTHOF enemyShape1draw5, enemyPos1, ADDR count
 00000220  66| FF 0D				dec enemyPos1.y
	   00000103 R
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape1draw4, LENGTHOF enemyShape1draw4, enemyPos1, ADDR count
 00000244  66| FF 0D				dec enemyPos1.y
	   00000103 R
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape1draw3, LENGTHOF enemyShape1draw3, enemyPos1, ADDR count
 00000268  66| FF 0D				dec enemyPos1.y
	   00000103 R
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape1draw2, LENGTHOF enemyShape1draw3, enemyPos1, ADDR count
 0000028C  66| FF 0D				dec enemyPos1.y
	   00000103 R
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape1draw1, LENGTHOF enemyShape1draw1, enemyPos1, ADDR count
 000002B0  66| FF 0D				dec enemyPos1.y
	   00000103 R
 000002B7  66| 83 05				add enemyPos1.y, 5 
	   00000103 R 05
						
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyBullet1, 1, enemyBulletPos1, ADDR count
 000002DC  66| 83 3D		        cmp enemyBulletPos1.y, ScreenHeight-5 ; Check if enemy bullet is at the bottom of the screen
	   00000107 R 19
 000002E4  7E 14		        jle bulletdrop1
 000002E6  66| C7 05		        mov enemyBulletPos1.x, 30 ; Reset enemyBullet1 position
	   00000105 R
	   001E
 000002EF  66| C7 05		        mov enemyBulletPos1.y, 5
	   00000107 R
	   0005
 000002F8  EB 07		        jmp drawEnemy2
 000002FA			        bulletdrop1:
 000002FA  66| FF 05		        inc enemyBulletPos1.y ; Bullet drop
	   00000107 R

 00000301			    drawEnemy2:
 00000301  80 3D 00000122 R	        cmp enemyActive2, 0 ; Check if enemy is active
	   00
 00000308  0F 84 000000FE	        je drawEnemy3
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape2draw5, LENGTHOF enemyShape2draw5, enemyPos2, ADDR count
 0000032B  66| FF 0D				dec enemyPos2.y
	   0000010B R
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape2draw4, LENGTHOF enemyShape2draw4, enemyPos2, ADDR count
 0000034F  66| FF 0D				dec enemyPos2.y
	   0000010B R
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape2draw3, LENGTHOF enemyShape2draw3, enemyPos2, ADDR count
 00000373  66| FF 0D				dec enemyPos2.y
	   0000010B R
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape2draw2, LENGTHOF enemyShape2draw3, enemyPos2, ADDR count
 00000397  66| FF 0D				dec enemyPos2.y
	   0000010B R
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape2draw1, LENGTHOF enemyShape2draw1, enemyPos2, ADDR count
 000003BB  66| FF 0D				dec enemyPos2.y
	   0000010B R
 000003C2  66| 83 05				add enemyPos2.y, 5 
	   0000010B R 05
						
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyBullet2, 1, enemyBulletPos2, ADDR count
 000003E7  66| 83 3D		        cmp enemyBulletPos2.y, ScreenHeight-5 ; Check if enemy bullet is at the bottom of the screen
	   0000010F R 19
 000003EF  7E 14		        jle bulletdrop2
 000003F1  66| C7 05		        mov enemyBulletPos2.x, 50 ; Reset enemyBullet2 position
	   0000010D R
	   0032
 000003FA  66| C7 05		        mov enemyBulletPos2.y, 5
	   0000010F R
	   0005
 00000403  EB 07		        jmp drawEnemy3
 00000405			        bulletdrop2:
 00000405  66| FF 05		        inc enemyBulletPos2.y ; Bullet drop
	   0000010F R
				     
 0000040C			    drawEnemy3:
 0000040C  80 3D 00000123 R	        cmp enemyActive3, 0 ; Check if enemy is active
	   00
 00000413  0F 84 000000FE	        je drawEnemy4
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape3draw5, LENGTHOF enemyShape3draw5, enemyPos3, ADDR count
 00000436  66| FF 0D				dec enemyPos3.y
	   00000113 R
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape3draw4, LENGTHOF enemyShape1draw3, enemyPos3, ADDR count
 0000045A  66| FF 0D				dec enemyPos3.y
	   00000113 R
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape3draw3, LENGTHOF enemyShape1draw3, enemyPos3, ADDR count
 0000047E  66| FF 0D				dec enemyPos3.y
	   00000113 R
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape3draw2, LENGTHOF enemyShape1draw3, enemyPos3, ADDR count
 000004A2  66| FF 0D				dec enemyPos3.y
	   00000113 R
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape3draw1, LENGTHOF enemyShape1draw3, enemyPos3, ADDR count
 000004C6  66| FF 0D				dec enemyPos3.y
	   00000113 R
 000004CD  66| 83 05				add enemyPos3.y, 5
	   00000113 R 05
						
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyBullet3, 1, enemyBulletPos3, ADDR count
 000004F2  66| 83 3D		        cmp enemyBulletPos3.y, ScreenHeight-5 ; Check if enemy bullet is at the bottom of the screen
	   00000117 R 19
 000004FA  7E 14		        jle bulletdrop3
 000004FC  66| C7 05		        mov enemyBulletPos3.x, 80 ; Reset enemyBullet3 position
	   00000115 R
	   0050
 00000505  66| C7 05		        mov enemyBulletPos3.y, 5
	   00000117 R
	   0005
 0000050E  EB 07		        jmp drawEnemy4
 00000510			        bulletdrop3:
 00000510  66| FF 05		        inc enemyBulletPos3.y ; Bullet drop
	   00000117 R

 00000517			    drawEnemy4:
 00000517  80 3D 00000124 R	        cmp enemyActive4, 0 ; Check if enemy is active
	   00
 0000051E  0F 84 000000FE	        je endDrawEnemies
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape4draw5, LENGTHOF enemyShape4draw5, enemyPos4, ADDR count
 00000541  66| FF 0D				dec enemyPos4.y
	   0000011B R
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape4draw4, LENGTHOF enemyShape4draw4, enemyPos4, ADDR count
 00000565  66| FF 0D				dec enemyPos4.y
	   0000011B R
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape4draw3, LENGTHOF enemyShape4draw3, enemyPos4, ADDR count
 00000589  66| FF 0D				dec enemyPos4.y
	   0000011B R
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape4draw2, LENGTHOF enemyShape4draw3, enemyPos4, ADDR count
 000005AD  66| FF 0D				dec enemyPos4.y
	   0000011B R
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape4draw1, LENGTHOF enemyShape4draw1, enemyPos4, ADDR count
 000005D1  66| FF 0D				dec enemyPos4.y
	   0000011B R
 000005D8  66| 83 05				add enemyPos4.y ,5
	   0000011B R 05
						
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyBullet4, 1, enemyBulletPos4, ADDR count
 000005FD  66| 83 3D		        cmp enemyBulletPos4.y, ScreenHeight-5 ; Check if enemy bullet is at the bottom of the screen
	   0000011F R 19
 00000605  7E 14		        jle bulletdrop4
 00000607  66| C7 05		        mov enemyBulletPos4.x, 100 ; Reset enemyBullet4 position
	   0000011D R
	   0064
 00000610  66| C7 05		        mov enemyBulletPos4.y, 5
	   0000011F R
	   0005
 00000619  EB 07		        jmp endDrawEnemies
 0000061B			        bulletdrop4:
 0000061B  66| FF 05		        inc enemyBulletPos4.y ; Bullet drop
	   0000011F R

 00000622			    endDrawEnemies:
					
					; Draw addLife
 00000622				GenerateLife:
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR addLife, 1, addLifePos, ADDR count
						invoke WriteConsoleOutputAttribute, outputHandle, ADDR addLifeColor, 1, addLifePos, ADDR count
 0000065C  66| 83 3D				cmp addLifePos.y, ScreenHeight-5 
	   00000133 R 19
 00000664  7E 34				jle addingLifeDrop
 00000666  66| 83 3D				cmp flag,7
	   00000147 R 07
 0000066E  7D 33				jge resetFlag
 00000670  0F B7 1D				movzx ebx ,flag
	   00000147 R
 00000677  D1 E3				shl ebx, 1  ;mul by 2
 00000679  BE 00000137 R			mov esi, OFFSET dropPos
 0000067E  66| FF 05				inc flag 
	   00000147 R
 00000685  66| 8B 04 1E				mov ax,[esi+ebx]
 00000689  66| A3				mov addLifePos.x, ax 
	   00000131 R
 0000068F  66| C7 05				mov addLifePos.y, 5      ; Start at the top of the screen
	   00000133 R
	   0005
 00000698  EB 29				jmp EndGenerateLife
						
 0000069A					addingLifeDrop:
 0000069A  66| FF 05				inc addLifePos.y ; drop 
	   00000133 R
 000006A1  EB 20				jmp EndGenerateLife
						
 000006A3					resetFlag:
 000006A3  66| C7 05					mov flag,0
	   00000147 R
	   0000
 000006AC  66| A1					mov ax,dropPos
	   00000137 R
 000006B2  66| A3					mov addLifePos.x, ax    
	   00000131 R
 000006B8  66| C7 05					mov addLifePos.y, 5      ; Start at the top of the screen
	   00000133 R
	   0005
 000006C1  EB 00					jmp EndGenerateLife
						
 000006C3				EndGenerateLife:
					
					; Draw bomb
 000006C3				BombDraw:
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR bomb, 1, bombPos, ADDR count
						invoke WriteConsoleOutputAttribute, outputHandle, ADDR bombColor, 1, bombPos, ADDR count
 000006FD  66| 83 3D				cmp bombPos.y, ScreenHeight-5 
	   0000014C R 19
 00000705  7E 34				jle bombDrop
 00000707  66| 83 3D				cmp flagBomb,7
	   00000160 R 07
 0000070F  7D 33				jge resetBombFlag
 00000711  0F B7 1D				movzx ebx ,flagBomb
	   00000160 R
 00000718  D1 E3				shl ebx, 1  ;mul by 2
 0000071A  BE 00000150 R			mov esi, OFFSET dropBombPos
 0000071F  66| FF 05				inc flagBomb 
	   00000160 R
 00000726  66| 8B 04 1E				mov ax,[esi+ebx]
 0000072A  66| A3				mov bombPos.x, ax 
	   0000014A R
 00000730  66| C7 05				mov bombPos.y, 5      ; Start at the top of the screen
	   0000014C R
	   0005
 00000739  EB 26				jmp EndBomb
						
 0000073B					bombDrop:
 0000073B  66| FF 05				inc bombPos.y ; drop 
	   0000014C R
 00000742  EB 1D				jmp EndBomb
						
 00000744					resetBombFlag:
 00000744  66| C7 05					mov flagBomb,0
	   00000160 R
	   0000
 0000074D  66| C7 05					mov bombPos.x, 55   
	   0000014A R
	   0037
 00000756  66| C7 05					mov bombPos.y, 5      ; Start at the top of the screen
	   0000014C R
	   0005
 0000075F  EB 00					jmp EndBomb
						
 00000761				EndBomb:
					
					; Draw bomb
 00000761				BombDraw2:
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR bomb2, 1, bombPos2, ADDR count
						invoke WriteConsoleOutputAttribute, outputHandle, ADDR bombColor2, 1, bombPos2, ADDR count
 0000079B  66| 83 3D				cmp bombPos2.y, ScreenHeight-5 
	   00000165 R 19
 000007A3  7E 34				jle bombDrop2
 000007A5  66| 83 3D				cmp flagBomb2,7
	   00000179 R 07
 000007AD  7D 33				jge resetBombFlag2
 000007AF  0F B7 1D				movzx ebx ,flagBomb2
	   00000179 R
 000007B6  D1 E3				shl ebx, 1  ;mul by 2
 000007B8  BE 00000169 R			mov esi, OFFSET dropBombPos2
 000007BD  66| FF 05				inc flagBomb2 
	   00000179 R
 000007C4  66| 8B 04 1E				mov ax,[esi+ebx]
 000007C8  66| A3				mov bombPos2.x, ax 
	   00000163 R
 000007CE  66| C7 05				mov bombPos2.y, 5      ; Start at the top of the screen
	   00000165 R
	   0005
 000007D7  EB 26				jmp EndBomb2
						
 000007D9					bombDrop2:
 000007D9  66| FF 05				inc bombPos2.y ; drop 
	   00000165 R
 000007E0  EB 1D				jmp EndBomb2
						
 000007E2					resetBombFlag2:
 000007E2  66| C7 05					mov flagBomb2,0
	   00000179 R
	   0000
 000007EB  66| C7 05					mov bombPos2.x,36 
	   00000163 R
	   0024
 000007F4  66| C7 05					mov bombPos2.y, 5      ; Start at the top of the screen
	   00000165 R
	   0005
 000007FD  EB 00					jmp EndBomb2
						
 000007FF				EndBomb2:
					
					
					
					
				        ; Handle input
				        INVOKE GetAsyncKeyState, VK_LEFT
 00000806  66| A9 8000		        test ax, 8000h
 0000080A  74 14		        jz checkRight
 0000080C  66| 83 3D		        cmp airplanePos.x, MarginSize ; If airplanePos.x is at the left edge of the screen, do not move right
	   00000038 R 0F
 00000814  7E 0A		        jle checkRight
 00000816  66| 83 2D		        sub airplanePos.x, 2
	   00000038 R 02
 0000081E  EB 21		        jmp checkShoot

 00000820			    checkRight:
				        INVOKE GetAsyncKeyState, VK_RIGHT
 00000827  66| A9 8000		        test ax, 8000h
 0000082B  74 14		        jz checkShoot
 0000082D  66| 83 3D		        cmp airplanePos.x, ScreenWidth - MarginSize - 10; If airplanePos.x is at the right edge of the screen, do not move right
	   00000038 R 69
 00000835  7D 0A		        jge checkShoot
 00000837  66| 83 05		        add airplanePos.x, 2
	   00000038 R 02
 0000083F  EB 00		        jmp checkShoot
						
						
						
 00000841				checkShoot:
				        INVOKE GetAsyncKeyState, VK_SPACE
 00000848  66| A9 8000		        test ax, 8000h
 0000084C  74 2B		        jz updateBullet
 0000084E  66| 8B 1D		        mov bx, airplanePos.x
	   00000038 R
 00000855  66| 83 C3 05		        add bx, 5 ; Adjust bullet position x
 00000859  66| 89 1D		        mov bulletPos.x, bx
	   0000003C R
 00000860  66| 8B 1D		        mov bx, airplanePos.y
	   0000003A R
 00000867  66| 83 EB 03		        sub bx, 3 ; Adjust bullet position y
 0000086B  66| 89 1D		        mov bulletPos.y, bx
	   0000003E R
 00000872  66| FF 0D		        dec bulletPos.y
	   0000003E R

 00000879			    updateBullet:
				        ; Update bullet position
 00000879  66| 83 3D		        cmp bulletPos.y, 0
	   0000003E R 00
 00000881  74 07		        je endUpdate
 00000883  66| FF 0D		        dec bulletPos.y
	   0000003E R
 0000088A			    endUpdate:

				        ; Delay for a short period
				        INVOKE Sleep, 50
						
 00000891				checkGetBomb:    
 00000891  66| 83 3D		        cmp bombPos.y, ScreenHeight-5 
	   0000014C R 19
 00000899  7C 7C		        jl checkGetBomb2 
 0000089B  66| A1				mov ax, airplanePos.x
	   00000038 R
 000008A1  66| 83 E8 01		        sub ax, 1
 000008A5  66| 39 05		        cmp bombPos.x, ax 
	   0000014A R
 000008AC  7C 69		        jl checkGetBomb2 ; skip
 000008AE  66| A1		        mov ax, airplanePos.x
	   00000038 R
 000008B4  66| 83 C0 0A		        add ax, 10
 000008B8  66| 39 05		        cmp bombPos.x, ax 
	   0000014A R
 000008BF  7F 56		        jg checkGetBomb2 ; skip
 000008C1  83 2D 000002AA R	        sub life,2   ; If no skip, then collision happen
	   02
 000008C8  66| 83 3D				cmp flagBomb,7
	   00000160 R 07
 000008D0  7D 2A				jge resetBombFlag3
 000008D2  0F B7 1D				movzx ebx ,flagBomb
	   00000160 R
 000008D9  D1 E3				shl ebx, 1  ;mul by 2
 000008DB  BE 00000150 R			mov esi, OFFSET dropBombPos
 000008E0  66| FF 05				inc flagBomb 
	   00000160 R
 000008E7  66| 8B 04 1E				mov ax,[esi+ebx]
 000008EB  66| A3				mov bombPos.x, ax 
	   0000014A R
 000008F1  66| C7 05				mov bombPos.y, 5  
	   0000014C R
	   0005
						
 000008FA  EB 1B				jmp checkGetBomb2   
						
 000008FC					resetBombFlag3:
 000008FC  66| C7 05					mov flagBomb,0
	   00000160 R
	   0000
 00000905  66| C7 05					mov bombPos.x, 54
	   0000014A R
	   0036
 0000090E  66| C7 05					mov bombPos.y, 5 
	   0000014C R
	   0005
							
 00000917				checkGetBomb2:    
 00000917  66| 83 3D		        cmp bombPos2.y, ScreenHeight-5 
	   00000165 R 19
 0000091F  7C 7B		        jl checkGetAddLife 
 00000921  66| A1				mov ax, airplanePos.x
	   00000038 R
 00000927  66| 83 E8 01		        sub ax, 1
 0000092B  66| 39 05		        cmp bombPos2.x, ax 
	   00000163 R
 00000932  7C 68		        jl checkGetAddLife ; skip
 00000934  66| A1		        mov ax, airplanePos.x
	   00000038 R
 0000093A  66| 83 C0 0A		        add ax, 10
 0000093E  66| 39 05		        cmp bombPos2.x, ax 
	   00000163 R
 00000945  7F 55		        jg checkGetAddLife ; skip
 00000947  FF 0D 000002AA R	        dec life   ; If no skip, then collision happen
 0000094D  66| 83 3D				cmp flagBomb2,7
	   00000179 R 07
 00000955  7D 2A				jge resetBombFlag4
 00000957  0F B7 1D				movzx ebx ,flagBomb2
	   00000179 R
 0000095E  D1 E3				shl ebx, 1  ;mul by 2
 00000960  BE 00000169 R			mov esi, OFFSET dropBombPos2
 00000965  66| FF 05				inc flagBomb2 
	   00000179 R
 0000096C  66| 8B 04 1E				mov ax,[esi+ebx]
 00000970  66| A3				mov bombPos2.x, ax 
	   00000163 R
 00000976  66| C7 05				mov bombPos2.y, 5  
	   00000165 R
	   0005
						
 0000097F  EB 1B				jmp checkGetAddLife   
						
 00000981					resetBombFlag4:
 00000981  66| C7 05					mov flagBomb2,0
	   00000179 R
	   0000
 0000098A  66| C7 05					mov bombPos2.x,77
	   00000163 R
	   004D
 00000993  66| C7 05					mov bombPos2.y, 5 
	   00000165 R
	   0005
					
				   
 0000099C			    checkGetAddLife:    
 0000099C  66| 83 3D		        cmp addLifePos.y, ScreenHeight-5 
	   00000133 R 19
 000009A4  0F 8C 00000089	        jl checkEnemyCollision1 
 000009AA  66| A1				mov ax, airplanePos.x
	   00000038 R
 000009B0  66| 83 E8 01		        sub ax, 1
 000009B4  66| 39 05		        cmp addLifePos.x, ax 
	   00000131 R
 000009BB  7C 76		        jl checkEnemyCollision1 ; skip
 000009BD  66| A1		        mov ax, airplanePos.x
	   00000038 R
 000009C3  66| 83 C0 0A		        add ax, 10
 000009C7  66| 39 05		        cmp addLifePos.x, ax 
	   00000131 R
 000009CE  7F 63		        jg checkEnemyCollision1 ; skip
 000009D0  83 3D 000002AA R			cmp life,3
	   03
 000009D7  7D 5A				jge checkEnemyCollision1 
 000009D9  FF 05 000002AA R	        inc life    ; If no skip, then collision happen
 000009DF  66| 83 3D				cmp flag,7
	   00000147 R 07
 000009E7  7D 2A				jge resetFlag2
 000009E9  0F B7 1D				movzx ebx ,flag
	   00000147 R
 000009F0  D1 E3				shl ebx, 1  ;mul by 2
 000009F2  BE 00000137 R			mov esi, OFFSET dropPos
 000009F7  66| FF 05				inc flag 
	   00000147 R
 000009FE  66| 8B 04 1E				mov ax,[esi+ebx]
 00000A02  66| A3				mov addLifePos.x, ax 
	   00000131 R
 00000A08  66| C7 05				mov addLifePos.y, 5  
	   00000133 R
	   0005
						
 00000A11  EB 20				jmp checkEnemyCollision1   
						
 00000A13					resetFlag2:
 00000A13  66| C7 05					mov flag,0
	   00000147 R
	   0000
 00000A1C  66| 8B 0D					mov cx,dropPos
	   00000137 R
 00000A23  66| 89 0D					mov addLifePos.x, cx
	   00000131 R
 00000A2A  66| C7 05					mov addLifePos.y, 5 
	   00000133 R
	   0005
					
					; Check if airplane is shot
 00000A33			    checkEnemyCollision1:    
 00000A33  80 3D 00000121 R	        cmp enemyActive1, 0 ; If equal, enemy1 already died
	   00
 00000A3A  74 48		        je checkEnemyCollision2
 00000A3C  66| 83 3D		       cmp enemyBulletPos1.y, ScreenHeight-5 ; Check1: enemyBullet.y and plane.y
	   00000107 R 19
 00000A44  7C 3E		        jl checkEnemyCollision2 ; Bullet still up in sky, skip
 00000A46  66| A1		        mov ax, airplanePos.x
	   00000038 R
 00000A4C  66| 83 E8 01		        sub ax, 1
 00000A50  66| 39 05		        cmp enemyBulletPos1.x, ax ; Check2: enemyBullet.x is between the range of plane.x
	   00000105 R
 00000A57  7C 2B		        jl checkEnemyCollision2 ; skip
 00000A59  66| A1		        mov ax, airplanePos.x
	   00000038 R
 00000A5F  66| 83 C0 0A		        add ax, 10
 00000A63  66| 39 05		        cmp enemyBulletPos1.x, ax ; Check3: enemyBullet.x is between the range of plane.x
	   00000105 R
 00000A6A  7F 18		        jg checkEnemyCollision2 ; skip
 00000A6C  FF 0D 000002AA R	        dec life    ; If no skip, then collision happen
 00000A72  66| C7 05		        mov enemyBulletPos1.x, 30 ; Reset enemyBullet1 position
	   00000105 R
	   001E
 00000A7B  66| C7 05		        mov enemyBulletPos1.y, 5
	   00000107 R
	   0005
				  

 00000A84			    checkEnemyCollision2:
 00000A84  80 3D 00000122 R	    cmp enemyActive2, 0 ; If equal, enemy2 already died
	   00
 00000A8B  74 48		        je checkEnemyCollision3
 00000A8D  66| 83 3D		        cmp enemyBulletPos2.y, ScreenHeight-5 ; Check1: enemyBullet.y and plane.y
	   0000010F R 19
 00000A95  7C 3E		        jl checkEnemyCollision3 ; Bullet still up in sky, skip
 00000A97  66| A1		        mov ax, airplanePos.x
	   00000038 R
 00000A9D  66| 83 E8 01		        sub ax, 1
 00000AA1  66| 39 05		        cmp enemyBulletPos2.x, ax ; Check2: enemyBullet.x is between the range of plane.x
	   0000010D R
 00000AA8  7C 2B		        jl checkEnemyCollision3 ; skip
 00000AAA  66| A1		        mov ax, airplanePos.x
	   00000038 R
 00000AB0  66| 83 C0 0A		        add ax, 10
 00000AB4  66| 39 05		        cmp enemyBulletPos2.x, ax ; Check3: enemyBullet.x is between the range of plane.x
	   0000010D R
 00000ABB  7F 18		        jg checkEnemyCollision3 ; skip
 00000ABD  FF 0D 000002AA R	        dec life    ; If no skip, then collision happen
 00000AC3  66| C7 05		        mov enemyBulletPos2.x, 50 ; Reset enemyBullet2 position
	   0000010D R
	   0032
 00000ACC  66| C7 05		        mov enemyBulletPos2.y, 5
	   0000010F R
	   0005

 00000AD5			    checkEnemyCollision3:
 00000AD5  80 3D 00000123 R	    cmp enemyActive3, 0 ; If equal, enemy3 already died
	   00
 00000ADC  74 48		        je checkEnemyCollision4
 00000ADE  66| 83 3D		        cmp enemyBulletPos3.y, ScreenHeight-5 ; Check1: enemyBullet.y and plane.y
	   00000117 R 19
 00000AE6  7C 3E		        jl checkEnemyCollision4 ; Bullet still up in sky, skip
 00000AE8  66| A1		        mov ax, airplanePos.x
	   00000038 R
 00000AEE  66| 83 E8 01		        sub ax, 1
 00000AF2  66| 39 05		        cmp enemyBulletPos3.x, ax ; Check2: enemyBullet.x is between the range of plane.x
	   00000115 R
 00000AF9  7C 2B		        jl checkEnemyCollision4 ; skip
 00000AFB  66| A1		        mov ax, airplanePos.x
	   00000038 R
 00000B01  66| 83 C0 0A		        add ax, 10
 00000B05  66| 39 05		        cmp enemyBulletPos3.x, ax ; Check3: enemyBullet.x is between the range of plane.x
	   00000115 R
 00000B0C  7F 18		        jg checkEnemyCollision4 ; skip
 00000B0E  FF 0D 000002AA R	        dec life    ; If no skip, then collision happen
 00000B14  66| C7 05		        mov enemyBulletPos3.x, 80 ; Reset enemyBullet3 position
	   00000115 R
	   0050
 00000B1D  66| C7 05		        mov enemyBulletPos3.y, 5
	   00000117 R
	   0005

 00000B26			    checkEnemyCollision4:
 00000B26  80 3D 00000124 R	    cmp enemyActive4, 0 ; If equal, enemy4 already died
	   00
 00000B2D  74 48		        je endEnemyCollision
 00000B2F  66| 83 3D		        cmp enemyBulletPos4.y, ScreenHeight-5 ; Check1: enemyBullet.y and plane.y
	   0000011F R 19
 00000B37  7C 3E		        jl endEnemyCollision ; Bullet still up in sky, skip
 00000B39  66| A1		        mov ax, airplanePos.x
	   00000038 R
 00000B3F  66| 83 E8 01		        sub ax, 1
 00000B43  66| 39 05		        cmp enemyBulletPos4.x, ax ; Check2: enemyBullet.x is between the range of plane.x
	   0000011D R
 00000B4A  7C 2B		        jl endEnemyCollision ; skip
 00000B4C  66| A1		        mov ax, airplanePos.x
	   00000038 R
 00000B52  66| 83 C0 0A		        add ax, 10
 00000B56  66| 39 05		        cmp enemyBulletPos4.x, ax ; Check3: enemyBullet.x is between the range of plane.x
	   0000011D R
 00000B5D  7F 18		        jg endEnemyCollision ; skip
 00000B5F  FF 0D 000002AA R	        dec life    ; If no skip, then collision happen
 00000B65  66| C7 05		        mov enemyBulletPos4.x, 100 ; Reset enemyBullet4 position
	   0000011D R
	   0064
 00000B6E  66| C7 05		        mov enemyBulletPos4.y, 5
	   0000011F R
	   0005
 00000B77			    endEnemyCollision:
				              
				    
				    ;Check if enemy1 is shot
 00000B77			    checkBulletCollision1:
 00000B77  66| 83 3D		        cmp bulletPos.y, 5 ; If bullet is at the top of the screen, skip
	   0000003E R 05
 00000B7F  75 2C		        jne checkBulletCollision2
 00000B81  B9 00000008		        mov ecx,8
 00000B86  66| A1				mov ax, enemyPos1.x
	   00000101 R
 00000B8C					L1:
 00000B8C  66| 39 05					cmp bulletPos.x, ax ; Check1: bullet.x and enemy.x
	   0000003C R
 00000B93  74 06					je bulletHitEnemy1 ; skip
 00000B95  66| 40					inc ax
 00000B97  E2 F3					loop L1
 00000B99  EB 12					jmp checkBulletCollision2
 00000B9B					bulletHitEnemy1:
 00000B9B  C6 05 00000121 R				mov enemyActive1, 0 ; If no skip, then collision happen, enemy2 died
	   00
 00000BA2  66| C7 05					mov bulletPos.y, 0 ; Reset bullet position
	   0000003E R
	   0000
 00000BAB  EB 00					jmp checkBulletCollision2

				    ; Check if enemy2 is shot
 00000BAD			    checkBulletCollision2:
 00000BAD  66| 83 3D		        cmp bulletPos.y, 5 ; If bullet is at the top of the screen, skip
	   0000003E R 05
 00000BB5  75 2C		        jne checkBulletCollision3
 00000BB7  B9 00000009				mov ecx,9
 00000BBC  66| A1				mov ax, enemyPos2.x
	   00000109 R
 00000BC2					L2:
 00000BC2  66| 39 05					cmp bulletPos.x, ax ; Check1: bullet.x and enemy.x
	   0000003C R
 00000BC9  74 06					je bulletHitEnemy2 ; skip
 00000BCB  66| 40					inc ax
 00000BCD  E2 F3					loop L2
 00000BCF  EB 12					jmp checkBulletCollision3
 00000BD1					bulletHitEnemy2:
 00000BD1  C6 05 00000122 R				mov enemyActive2, 0 ; If no skip, then collision happen, enemy2 died
	   00
 00000BD8  66| C7 05					mov bulletPos.y, 0 ; Reset bullet position
	   0000003E R
	   0000
 00000BE1  EB 00					jmp checkBulletCollision3

				    ; Check if enemy3 is shot
 00000BE3			    checkBulletCollision3:
 00000BE3  66| 83 3D		        cmp bulletPos.y, 5 ; If bullet is at the top of the screen, skip
	   0000003E R 05
 00000BEB  75 2C		        jne checkBulletCollision4
 00000BED  B9 00000008		        mov ecx,8
 00000BF2  66| A1				mov ax, enemyPos3.x
	   00000111 R
 00000BF8					L3:
 00000BF8  66| 39 05					cmp bulletPos.x, ax ; Check1: bullet.x and enemy.x
	   0000003C R
 00000BFF  74 06					je bulletHitEnemy3 ; skip
 00000C01  66| 40					inc ax
 00000C03  E2 F3					loop L3
 00000C05  EB 12					jmp checkBulletCollision4
 00000C07					bulletHitEnemy3:
 00000C07  C6 05 00000123 R				mov enemyActive3, 0 ; If no skip, then collision happen, enemy2 died
	   00
 00000C0E  66| C7 05					mov bulletPos.y, 0 ; Reset bullet position
	   0000003E R
	   0000
 00000C17  EB 00					jmp checkBulletCollision4
				     
				    ; Check if enemy4 is shot
 00000C19			    checkBulletCollision4:
 00000C19  66| 83 3D		        cmp bulletPos.y, 5 ; If bullet is at the top of the screen, skip
	   0000003E R 05
 00000C21  75 2C		        jne endBulletCollision
 00000C23  B9 00000008		        mov ecx,8
 00000C28  66| A1				mov ax, enemyPos4.x
	   00000119 R
 00000C2E					L4:
 00000C2E  66| 39 05					cmp bulletPos.x, ax ; Check1: bullet.x and enemy.x
	   0000003C R
 00000C35  74 06					je bulletHitEnemy4 ; skip
 00000C37  66| 40					inc ax
 00000C39  E2 F3					loop L4
 00000C3B  EB 12					jmp endBulletCollision
 00000C3D					bulletHitEnemy4:
 00000C3D  C6 05 00000124 R				mov enemyActive4, 0 ; If no skip, then collision happen, enemy2 died
	   00
 00000C44  66| C7 05					mov bulletPos.y, 0 ; Reset bullet position
	   0000003E R
	   0000
 00000C4D  EB 00					jmp endBulletCollision
 00000C4F			    endBulletCollision:

				     ; If lose
 00000C4F			    lose:
 00000C4F  83 3D 000002AA R	        cmp life, 0
	   00
 00000C56  0F 85 000000C1	        jne checkWin
				        ;;;TODO DRAW LOSE;;;
 00000C5C  E8 00000000 E	        call Clrscr
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR loseDraw1, LENGTHOF loseDraw1, losePos, ADDR count
 00000C7E  66| FF 05		        inc losePos.y
	   00000207 R
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR loseDraw2, LENGTHOF loseDraw2, losePos, ADDR count
 00000CA2  66| FF 05		        inc losePos.y
	   00000207 R
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR loseDraw3, LENGTHOF loseDraw3, losePos, ADDR count
 00000CC6  66| FF 05		        inc losePos.y
	   00000207 R
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR loseDraw4, LENGTHOF loseDraw4, losePos, ADDR count
 00000CEA  66| FF 05		        inc losePos.y
	   00000207 R
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR loseDraw5, LENGTHOF loseDraw5, losePos, ADDR count
				        INVOKE sleep, 5000
 00000D18  E9 000000DD		        jmp exitGame


				    ; If win
 00000D1D			    checkWin:
 00000D1D  A0 00000121 R	        mov al, enemyActive1
 00000D22  0A 05 00000122 R	        or al, enemyActive2
 00000D28  0A 05 00000123 R	        or al, enemyActive3
 00000D2E  0A 05 00000124 R	        or al, enemyActive4
 00000D34  3C 00		        cmp al,0
 00000D36  0F 85 FFFFF2DF	        jne gameLoop
				   
				        ; Draw "WIN!"
 00000D3C  E8 00000000 E	        call Clrscr
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR winDraw1, LENGTHOF winDraw1, winPos, ADDR count
 00000D5E  66| FF 05		        inc winPos.y
	   0000017D R
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR winDraw2, LENGTHOF winDraw2, winPos, ADDR count
 00000D82  66| FF 05		        inc winPos.y
	   0000017D R
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR winDraw3, LENGTHOF winDraw3, winPos, ADDR count
 00000DA6  66| FF 05		        inc winPos.y
	   0000017D R
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR winDraw4, LENGTHOF winDraw4, winPos, ADDR count
 00000DCA  66| FF 05		        inc winPos.y
	   0000017D R
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR winDraw5, LENGTHOF winDraw5, winPos, ADDR count      
				        INVOKE Sleep, 5000
 00000DF8  EB 00		        jmp exitGame
				   
 00000DFA			    exitGame:
				        exit

 00000E01			main ENDP

				END main

Microsoft (R) Macro Assembler Version 14.42.34435.0	    12/22/24 22:03:59
main.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000002C4 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000E01 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetAsyncKeyState . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleOutputCP . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
start@0  . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000E01 Public STDCALL
  gameLoop . . . . . . . . . . .	L Near	 0000001B _TEXT	
  DrawBoundaryLeft . . . . . . .	L Near	 0000003B _TEXT	
  DrawBoundaryRight  . . . . . .	L Near	 0000006B _TEXT	
  EndBoundaryDrawing . . . . . .	L Near	 0000009B _TEXT	
  drawlife3  . . . . . . . . . .	L Near	 000000B6 _TEXT	
  drawlife2  . . . . . . . . . .	L Near	 000000D5 _TEXT	
  drawlife1  . . . . . . . . . .	L Near	 000000F4 _TEXT	
  drawAirplane . . . . . . . . .	L Near	 00000113 _TEXT	
  skipBullet . . . . . . . . . .	L Near	 000001F6 _TEXT	
  drawenemy1 . . . . . . . . . .	L Near	 000001F6 _TEXT	
  bulletdrop1  . . . . . . . . .	L Near	 000002FA _TEXT	
  drawEnemy2 . . . . . . . . . .	L Near	 00000301 _TEXT	
  bulletdrop2  . . . . . . . . .	L Near	 00000405 _TEXT	
  drawEnemy3 . . . . . . . . . .	L Near	 0000040C _TEXT	
  bulletdrop3  . . . . . . . . .	L Near	 00000510 _TEXT	
  drawEnemy4 . . . . . . . . . .	L Near	 00000517 _TEXT	
  bulletdrop4  . . . . . . . . .	L Near	 0000061B _TEXT	
  endDrawEnemies . . . . . . . .	L Near	 00000622 _TEXT	
  GenerateLife . . . . . . . . .	L Near	 00000622 _TEXT	
  addingLifeDrop . . . . . . . .	L Near	 0000069A _TEXT	
  resetFlag  . . . . . . . . . .	L Near	 000006A3 _TEXT	
  EndGenerateLife  . . . . . . .	L Near	 000006C3 _TEXT	
  BombDraw . . . . . . . . . . .	L Near	 000006C3 _TEXT	
  bombDrop . . . . . . . . . . .	L Near	 0000073B _TEXT	
  resetBombFlag  . . . . . . . .	L Near	 00000744 _TEXT	
  EndBomb  . . . . . . . . . . .	L Near	 00000761 _TEXT	
  BombDraw2  . . . . . . . . . .	L Near	 00000761 _TEXT	
  bombDrop2  . . . . . . . . . .	L Near	 000007D9 _TEXT	
  resetBombFlag2 . . . . . . . .	L Near	 000007E2 _TEXT	
  EndBomb2 . . . . . . . . . . .	L Near	 000007FF _TEXT	
  checkRight . . . . . . . . . .	L Near	 00000820 _TEXT	
  checkShoot . . . . . . . . . .	L Near	 00000841 _TEXT	
  updateBullet . . . . . . . . .	L Near	 00000879 _TEXT	
  endUpdate  . . . . . . . . . .	L Near	 0000088A _TEXT	
  checkGetBomb . . . . . . . . .	L Near	 00000891 _TEXT	
  resetBombFlag3 . . . . . . . .	L Near	 000008FC _TEXT	
  checkGetBomb2  . . . . . . . .	L Near	 00000917 _TEXT	
  resetBombFlag4 . . . . . . . .	L Near	 00000981 _TEXT	
  checkGetAddLife  . . . . . . .	L Near	 0000099C _TEXT	
  resetFlag2 . . . . . . . . . .	L Near	 00000A13 _TEXT	
  checkEnemyCollision1 . . . . .	L Near	 00000A33 _TEXT	
  checkEnemyCollision2 . . . . .	L Near	 00000A84 _TEXT	
  checkEnemyCollision3 . . . . .	L Near	 00000AD5 _TEXT	
  checkEnemyCollision4 . . . . .	L Near	 00000B26 _TEXT	
  endEnemyCollision  . . . . . .	L Near	 00000B77 _TEXT	
  checkBulletCollision1  . . . .	L Near	 00000B77 _TEXT	
  L1 . . . . . . . . . . . . . .	L Near	 00000B8C _TEXT	
  bulletHitEnemy1  . . . . . . .	L Near	 00000B9B _TEXT	
  checkBulletCollision2  . . . .	L Near	 00000BAD _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 00000BC2 _TEXT	
  bulletHitEnemy2  . . . . . . .	L Near	 00000BD1 _TEXT	
  checkBulletCollision3  . . . .	L Near	 00000BE3 _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 00000BF8 _TEXT	
  bulletHitEnemy3  . . . . . . .	L Near	 00000C07 _TEXT	
  checkBulletCollision4  . . . .	L Near	 00000C19 _TEXT	
  L4 . . . . . . . . . . . . . .	L Near	 00000C2E _TEXT	
  bulletHitEnemy4  . . . . . . .	L Near	 00000C3D _TEXT	
  endBulletCollision . . . . . .	L Near	 00000C4F _TEXT	
  lose . . . . . . . . . . . . .	L Near	 00000C4F _TEXT	
  checkWin . . . . . . . . . . .	L Near	 00000D1D _TEXT	
  exitGame . . . . . . . . . . .	L Near	 00000DFA _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MarginSize . . . . . . . . . . .	Number	 0000000Fh   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
ScreenHeight . . . . . . . . . .	Number	 0000001Eh   
ScreenWidth  . . . . . . . . . .	Number	 00000082h   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
addLifeColor . . . . . . . . . .	Word	 00000135 _DATA	
addLifePos . . . . . . . . . . .	COORD	 00000131 _DATA	
addLife  . . . . . . . . . . . .	Byte	 00000130 _DATA	
airplaneDraw1  . . . . . . . . .	Byte	 00000000 _DATA	
airplaneDraw2  . . . . . . . . .	Byte	 00000008 _DATA	
airplaneDraw3  . . . . . . . . .	Byte	 00000013 _DATA	
airplaneDraw4  . . . . . . . . .	Byte	 00000020 _DATA	
airplaneDraw5  . . . . . . . . .	Byte	 00000029 _DATA	
airplanePos  . . . . . . . . . .	COORD	 00000038 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
bomb2  . . . . . . . . . . . . .	Byte	 00000162 _DATA	
bombColor2 . . . . . . . . . . .	Word	 00000167 _DATA	
bombColor  . . . . . . . . . . .	Word	 0000014E _DATA	
bombPos2 . . . . . . . . . . . .	COORD	 00000163 _DATA	
bombPos  . . . . . . . . . . . .	COORD	 0000014A _DATA	
bomb . . . . . . . . . . . . . .	Byte	 00000149 _DATA	
boundaryDrawn  . . . . . . . . .	Byte	 0000012F _DATA	
boundaryPosLeft  . . . . . . . .	COORD	 00000127 _DATA	
boundaryPosRight . . . . . . . .	COORD	 0000012B _DATA	
boundary . . . . . . . . . . . .	Byte	 00000125 _DATA	
brown  . . . . . . . . . . . . .	Number	 00000006h   
bulletPos  . . . . . . . . . . .	COORD	 0000003C _DATA	
bullet . . . . . . . . . . . . .	Byte	 00000033 _DATA	
bytesWritten . . . . . . . . . .	DWord	 0000029E _DATA	
count  . . . . . . . . . . . . .	DWord	 000002A6 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
dropBombPos2 . . . . . . . . . .	Word	 00000169 _DATA	
dropBombPos  . . . . . . . . . .	Word	 00000150 _DATA	
dropPos  . . . . . . . . . . . .	Word	 00000137 _DATA	
enemyActive1 . . . . . . . . . .	Byte	 00000121 _DATA	
enemyActive2 . . . . . . . . . .	Byte	 00000122 _DATA	
enemyActive3 . . . . . . . . . .	Byte	 00000123 _DATA	
enemyActive4 . . . . . . . . . .	Byte	 00000124 _DATA	
enemyBullet1 . . . . . . . . . .	Byte	 000000FD _DATA	
enemyBullet2 . . . . . . . . . .	Byte	 000000FE _DATA	
enemyBullet3 . . . . . . . . . .	Byte	 000000FF _DATA	
enemyBullet4 . . . . . . . . . .	Byte	 00000100 _DATA	
enemyBulletPos1  . . . . . . . .	COORD	 00000105 _DATA	
enemyBulletPos2  . . . . . . . .	COORD	 0000010D _DATA	
enemyBulletPos3  . . . . . . . .	COORD	 00000115 _DATA	
enemyBulletPos4  . . . . . . . .	COORD	 0000011D _DATA	
enemyPos1  . . . . . . . . . . .	COORD	 00000101 _DATA	
enemyPos2  . . . . . . . . . . .	COORD	 00000109 _DATA	
enemyPos3  . . . . . . . . . . .	COORD	 00000111 _DATA	
enemyPos4  . . . . . . . . . . .	COORD	 00000119 _DATA	
enemyShape1draw1 . . . . . . . .	Byte	 00000040 _DATA	
enemyShape1draw2 . . . . . . . .	Byte	 00000048 _DATA	
enemyShape1draw3 . . . . . . . .	Byte	 00000051 _DATA	
enemyShape1draw4 . . . . . . . .	Byte	 0000005A _DATA	
enemyShape1draw5 . . . . . . . .	Byte	 00000063 _DATA	
enemyShape2draw1 . . . . . . . .	Byte	 0000006C _DATA	
enemyShape2draw2 . . . . . . . .	Byte	 00000074 _DATA	
enemyShape2draw3 . . . . . . . .	Byte	 0000007E _DATA	
enemyShape2draw4 . . . . . . . .	Byte	 00000088 _DATA	
enemyShape2draw5 . . . . . . . .	Byte	 00000092 _DATA	
enemyShape3draw1 . . . . . . . .	Byte	 0000009A _DATA	
enemyShape3draw2 . . . . . . . .	Byte	 000000A4 _DATA	
enemyShape3draw3 . . . . . . . .	Byte	 000000AE _DATA	
enemyShape3draw4 . . . . . . . .	Byte	 000000B9 _DATA	
enemyShape3draw5 . . . . . . . .	Byte	 000000C3 _DATA	
enemyShape4draw1 . . . . . . . .	Byte	 000000CC _DATA	
enemyShape4draw2 . . . . . . . .	Byte	 000000D5 _DATA	
enemyShape4draw3 . . . . . . . .	Byte	 000000DF _DATA	
enemyShape4draw4 . . . . . . . .	Byte	 000000E9 _DATA	
enemyShape4draw5 . . . . . . . .	Byte	 000000F3 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
flagBomb2  . . . . . . . . . . .	Word	 00000179 _DATA	
flagBomb . . . . . . . . . . . .	Word	 00000160 _DATA	
flag . . . . . . . . . . . . . .	Word	 00000147 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
initialAirplanePos . . . . . . .	COORD	 00000034 _DATA	
lifePos  . . . . . . . . . . . .	COORD	 000002C0 _DATA	
lifeSymbol1  . . . . . . . . . .	Byte	 000002AE _DATA	
lifeSymbol2  . . . . . . . . . .	Byte	 000002B3 _DATA	
lifeSymbol3  . . . . . . . . . .	Byte	 000002B9 _DATA	
life . . . . . . . . . . . . . .	DWord	 000002AA _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
loseDraw1  . . . . . . . . . . .	Byte	 00000209 _DATA	
loseDraw2  . . . . . . . . . . .	Byte	 00000226 _DATA	
loseDraw3  . . . . . . . . . . .	Byte	 00000243 _DATA	
loseDraw4  . . . . . . . . . . .	Byte	 00000260 _DATA	
loseDraw5  . . . . . . . . . . .	Byte	 0000027D _DATA	
losePos  . . . . . . . . . . . .	COORD	 00000205 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
main . . . . . . . . . . . . . .	Text   	 start@0
outputHandle . . . . . . . . . .	DWord	 0000029A _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
screenBuffer . . . . . . . . . .	COORD	 000002A2 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
winDraw1 . . . . . . . . . . . .	Byte	 0000017F _DATA	
winDraw2 . . . . . . . . . . . .	Byte	 00000199 _DATA	
winDraw3 . . . . . . . . . . . .	Byte	 000001B4 _DATA	
winDraw4 . . . . . . . . . . . .	Byte	 000001CF _DATA	
winDraw5 . . . . . . . . . . . .	Byte	 000001EA _DATA	
winPos . . . . . . . . . . . . .	COORD	 0000017B _DATA	
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
