Microsoft (R) Macro Assembler Version 14.42.34435.0	    12/21/24 16:25:02
main.asm						     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data
				; Define BoxSize
 = 0000000F			MarginSize = 15 ; Margin size
 = 00000082			ScreenWidth = 130
 = 0000001E			ScreenHeight = 30

				; Define airplane
 00000000 20 20 20 20 20	airplaneDraw1 BYTE ' ', ' ', ' ', ' ', ' ', '/', 5ch, 0
	   2F 5C 00
 00000008 20 20 5F 5F 2F	airplaneDraw2 BYTE ' ', ' ', '_', '_', '/', ' ', ' ', 5ch, '_', '_', 0
	   20 20 5C 5F 5F
	   00
 00000013 2F 5F 5F 5F 5F	airplaneDraw3 BYTE '/', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 5ch, 0
	   5F 5F 5F 5F 5F
	   5F 5C 00
 00000020 20 20 20 20 7C	airplaneDraw4 BYTE  ' ',' ',' ', ' ', '|', ' ', ' ', '|', 0
	   20 20 7C 00
 00000029 20 20 20 2F 5F	airplaneDraw5 BYTE  ' ',' ', ' ', '/', '_', '|', '|', '_', 5ch, 0
	   7C 7C 5F 5C 00
 00000033 2A			bullet BYTE '*'
 00000034 0041 001C		initialAirplanePos COORD <ScreenWidth / 2, ScreenHeight - 2>
 00000038 0041 001C		airplanePos COORD <ScreenWidth / 2, ScreenHeight - 2>
 0000003C 0000 0000		bulletPos COORD <0, 0>

				; Define enemies
 00000040 45			enemy1 BYTE 'E'
 00000041 62			enemyBullet1 BYTE 'b'
 00000042 45			enemy2 BYTE 'E'
 00000043 62			enemyBullet2 BYTE 'b'
 00000044 45			enemy3 BYTE 'E'
 00000045 62			enemyBullet3 BYTE 'b'
 00000046 45			enemy4 BYTE 'E'
 00000047 62			enemyBullet4 BYTE 'b'
				; Define enemy positions and bullets
 00000048 001E 0005		enemyPos1 COORD <30, 5>
 0000004C 001E 0005		enemyBulletPos1 COORD <30, 5>
 00000050 0032 0005		enemyPos2 COORD <50, 5>
 00000054 0032 0005		enemyBulletPos2 COORD <50, 5>
 00000058 005A 0005		enemyPos3 COORD <90, 5>
 0000005C 005A 0005		enemyBulletPos3 COORD <90, 5>
 00000060 006E 0005		enemyPos4 COORD <110, 5>
 00000064 006E 0005		enemyBulletPos4 COORD <110, 5>
 00000068 01			enemyActive1 BYTE 1
 00000069 01			enemyActive2 BYTE 1
 0000006A 01			enemyActive3 BYTE 1
 0000006B 01			enemyActive4 BYTE 1

				; Define others
 0000006C 00000000		outputHandle DWORD 0
 00000070 00000000		bytesWritten DWORD 0
 00000074 00000000		count DWORD 0
 00000078 00000000		key DWORD ?
 0000007C 00000000		randomX DWORD ?

				; Define scores and lives
 00000080 00000000		score DWORD 0
 00000084 00000003		life DWORD 3
 00000088 03 00			lifeSymbol1 BYTE 03h,0
 0000008A 03 03 00		lifeSymbol2 BYTE 03h, 03h, 0
 0000008D 03 03 03 00		lifeSymbol3 BYTE 03h, 03h, 03h, 0
 00000091 0005 0003		lifePos COORD <5, 3>

				; Define words
 00000095 47 61 6D 65 20	gameOverMsg BYTE "Game Over", 0
	   4F 76 65 72 00

 00000000			.code
				SetConsoleOutputCP PROTO STDCALL :DWORD
				GetAsyncKeyState PROTO STDCALL :DWORD

 00000000			main PROC
				    ; Initialize console
				    INVOKE SetConsoleOutputCP, 65001 ; Set console output to UTF-8
				    INVOKE GetStdHandle, STD_OUTPUT_HANDLE
 00000011  A3 0000006C R	    mov outputHandle, eax
 00000016  E8 00000000 E	    call Clrscr


				    ; Main game loop
 0000001B			    gameLoop:
				        ; Clear screen
 0000001B  E8 00000000 E	        call Clrscr

				        ; Draw life
 00000020  83 3D 00000084 R	        cmp life, 3
	   03
 00000027  74 12		        je drawlife3
 00000029  83 3D 00000084 R	        cmp life, 2
	   02
 00000030  74 28		        je drawlife2
 00000032  83 3D 00000084 R	        cmp life, 1
	   01
 00000039  74 3E		        je drawlife1

				    ; Draw life
 0000003B			    drawlife3:
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR lifeSymbol3, 3, lifePos, ADDR count
 00000058  EB 3E		        jmp drawAirplane
 0000005A			    drawlife2:
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR lifeSymbol2, 2, lifePos, ADDR count
 00000077  EB 1F		        jmp drawAirplane
 00000079			    drawlife1:
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR lifeSymbol1, 1, lifePos, ADDR count
 00000096  EB 00		        jmp drawAirplane

				    ; Draw airplane
 00000098			    drawAirplane:
				        INVOKE WriteConsoleOutputCharacter,
				               outputHandle, ADDR airplaneDraw5, LENGTHOF airplaneDraw5, airplanePos, ADDR count
 000000B5  66| FF 0D		        dec airplanePos.y
	   0000003A R
				        INVOKE WriteConsoleOutputCharacter,
				               outputHandle, ADDR airplaneDraw4, LENGTHOF airplaneDraw4, airplanePos, ADDR count
 000000D9  66| FF 0D		        dec airplanePos.y
	   0000003A R
				        INVOKE WriteConsoleOutputCharacter,
				               outputHandle, ADDR airplaneDraw3, LENGTHOF airplaneDraw3, airplanePos, ADDR count
 000000FD  66| FF 0D		        dec airplanePos.y
	   0000003A R
				        INVOKE WriteConsoleOutputCharacter,
				               outputHandle, ADDR airplaneDraw2, LENGTHOF airplaneDraw2, airplanePos, ADDR count
 00000121  66| FF 0D		        dec airplanePos.y
	   0000003A R
				        INVOKE WriteConsoleOutputCharacter,
				               outputHandle, ADDR airplaneDraw1, LENGTHOF airplaneDraw1, airplanePos, ADDR count
 00000145  66| FF 0D		        dec airplanePos.y
	   0000003A R
 0000014C  66| 83 05		        add airplanePos.y, 5 ; Add back 5 to airplanePos.y
	   0000003A R 05

				        ; Draw my bullet if active
 00000154  66| 83 3D		        cmp bulletPos.y, 0
	   0000003E R 00
 0000015C  74 1D		        je skipBullet
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR bullet, 1, bulletPos, ADDR count
 0000017B			    skipBullet:

				        ; Draw enemies and their bullets
 0000017B			    drawenemy1:
 0000017B  80 3D 00000068 R	        cmp enemyActive1, 0 ; Check if enemy is active 
	   00
 00000182  74 5F		        je drawEnemy2
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemy1, 1, enemyPos1, ADDR count
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyBullet1, 1, enemyBulletPos1, ADDR count
 000001BE  66| 83 3D		        cmp enemyBulletPos1.y, ScreenHeight-5 ; Check if enemy bullet is at the bottom of the screen
	   0000004E R 19
 000001C6  7E 14		        jle bulletdrop1
 000001C8  66| C7 05		        mov enemyBulletPos1.x, 30 ; Reset enemyBullet1 position
	   0000004C R
	   001E
 000001D1  66| C7 05		        mov enemyBulletPos1.y, 5
	   0000004E R
	   0005
 000001DA  EB 07		        jmp drawEnemy2
 000001DC			        bulletdrop1:
 000001DC  66| FF 05		        inc enemyBulletPos1.y ; Bullet drop
	   0000004E R

 000001E3			    drawEnemy2:
 000001E3  80 3D 00000069 R	        cmp enemyActive2, 0 ; Check if enemy is active
	   00
 000001EA  74 5F		        je drawEnemy3
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemy2, 1, enemyPos2, ADDR count
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyBullet2, 1, enemyBulletPos2, ADDR count
 00000226  66| 83 3D		        cmp enemyBulletPos2.y, ScreenHeight-5 ; Check if enemy bullet is at the bottom of the screen
	   00000056 R 19
 0000022E  7E 14		        jle bulletdrop2
 00000230  66| C7 05		        mov enemyBulletPos2.x, 50 ; Reset enemyBullet2 position
	   00000054 R
	   0032
 00000239  66| C7 05		        mov enemyBulletPos2.y, 5
	   00000056 R
	   0005
 00000242  EB 07		        jmp drawEnemy3
 00000244			        bulletdrop2:
 00000244  66| FF 05		        inc enemyBulletPos2.y ; Bullet drop
	   00000056 R
				     
 0000024B			    drawEnemy3:
 0000024B  80 3D 0000006A R	        cmp enemyActive3, 0 ; Check if enemy is active
	   00
 00000252  74 5F		        je drawEnemy4
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemy3, 1, enemyPos3, ADDR count
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyBullet3, 1, enemyBulletPos3, ADDR count
 0000028E  66| 83 3D		        cmp enemyBulletPos3.y, ScreenHeight-5 ; Check if enemy bullet is at the bottom of the screen
	   0000005E R 19
 00000296  7E 14		        jle bulletdrop3
 00000298  66| C7 05		        mov enemyBulletPos3.x, 90 ; Reset enemyBullet3 position
	   0000005C R
	   005A
 000002A1  66| C7 05		        mov enemyBulletPos3.y, 5
	   0000005E R
	   0005
 000002AA  EB 07		        jmp drawEnemy4
 000002AC			        bulletdrop3:
 000002AC  66| FF 05		        inc enemyBulletPos3.y ; Bullet drop
	   0000005E R

 000002B3			    drawEnemy4:
 000002B3  80 3D 0000006B R	        cmp enemyActive4, 0 ; Check if enemy is active
	   00
 000002BA  74 5F		        je endDrawEnemies
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemy4, 1, enemyPos4, ADDR count
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyBullet4, 1, enemyBulletPos4, ADDR count
 000002F6  66| 83 3D		        cmp enemyBulletPos4.y, ScreenHeight-5 ; Check if enemy bullet is at the bottom of the screen
	   00000066 R 19
 000002FE  7E 14		        jle bulletdrop4
 00000300  66| C7 05		        mov enemyBulletPos4.x, 110 ; Reset enemyBullet4 position
	   00000064 R
	   006E
 00000309  66| C7 05		        mov enemyBulletPos4.y, 5
	   00000066 R
	   0005
 00000312  EB 07		        jmp endDrawEnemies
 00000314			        bulletdrop4:
 00000314  66| FF 05		        inc enemyBulletPos4.y ; Bullet drop
	   00000066 R

 0000031B			    endDrawEnemies:

				        ; Handle input
				        INVOKE GetAsyncKeyState, VK_LEFT
 00000322  66| A9 8000		        test ax, 8000h
 00000326  74 14		        jz checkRight
 00000328  66| 83 3D		        cmp airplanePos.x, MarginSize ; If airplanePos.x is at the left edge of the screen, do not move right
	   00000038 R 0F
 00000330  7E 0A		        jle checkRight
 00000332  66| 83 2D		        sub airplanePos.x, 2
	   00000038 R 02
 0000033A  EB 21		        jmp checkShoot

 0000033C			    checkRight:
				        INVOKE GetAsyncKeyState, VK_RIGHT
 00000343  66| A9 8000		        test ax, 8000h
 00000347  74 14		        jz checkShoot
 00000349  66| 83 3D		        cmp airplanePos.x, ScreenWidth - MarginSize ; If airplanePos.x is at the right edge of the screen, do not move right
	   00000038 R 73
 00000351  7D 0A		        jge checkShoot
 00000353  66| 83 05		        add airplanePos.x, 2
	   00000038 R 02
 0000035B  EB 00		        jmp checkShoot

 0000035D			    checkShoot:
				        INVOKE GetAsyncKeyState, VK_SPACE
 00000364  66| A9 8000		        test ax, 8000h
 00000368  74 2B		        jz updateBullet
 0000036A  66| 8B 1D		        mov bx, airplanePos.x
	   00000038 R
 00000371  66| 83 C3 05		        add bx, 5 ; Adjust bullet position x
 00000375  66| 89 1D		        mov bulletPos.x, bx
	   0000003C R
 0000037C  66| 8B 1D		        mov bx, airplanePos.y
	   0000003A R
 00000383  66| 83 EB 03		        sub bx, 3 ; Adjust bullet position y
 00000387  66| 89 1D		        mov bulletPos.y, bx
	   0000003E R
 0000038E  66| FF 0D		        dec bulletPos.y
	   0000003E R

 00000395			    updateBullet:
				        ; Update bullet position
 00000395  66| 83 3D		        cmp bulletPos.y, 0
	   0000003E R 00
 0000039D  74 07		        je endUpdate
 0000039F  66| FF 0D		        dec bulletPos.y
	   0000003E R
 000003A6			    endUpdate:

				        ; Delay for a short period
				        INVOKE Sleep, 50

				    ; Check for collision with enemy
 000003AD			    checkEnemyCollision1:    
 000003AD  80 3D 00000068 R	        cmp enemyActive1, 0 ; If equal, enemy1 already died
	   00
 000003B4  74 1F		        je checkEnemyCollision2
 000003B6  66| 83 3D		       cmp enemyBulletPos1.y, ScreenHeight - 6 ; Check1: enemyBullet.y and plane.y
	   0000004E R 18
 000003BE  7C 15		        jl checkEnemyCollision2 ; Bullet still up in sky, skip
 000003C0  66| A1		        mov ax, enemyBulletPos1.x
	   0000004C R
 000003C6  66| 3B 05		        cmp ax, airplanePos.x - 2 ; Check2: enemyBullet.x is between the range of plane.x
	   00000036 R
 000003CD  7F 06		        jg checkEnemyCollision2 ; skip
 000003CF  FF 0D 00000084 R	        dec life    ; If no skip, then collision happen

 000003D5			        checkEnemyCollision2:

				        
				    
				    
				    ;cmp byte ptr [edi], 0
				    ;    je skipEnemyCollision
				    ;    mov ax, (COORD PTR [esi]).x
				    ;    cmp ax, bulletPos.x
				    ;    jne skipEnemyCollision
				    ;    mov ax, (COORD PTR [esi]).y
				    ;    cmp ax, bulletPos.y
				    ;    jne skipEnemyCollision
				    ;    ; If collision, reset enemy position with random x and deactivate bullet
				    ;    mov byte ptr [edi], 0
				    ;    mov ax, ScreenWidth
				    ;    sub ax, 10
				    ;    INVOKE RandomRange
				    ;    mov (COORD PTR [esi]).x, ax
				    ;    mov (COORD PTR [esi]).y, 1
				    ;    mov byte ptr [edi], 1
				    ;    mov bulletPos.y, 0
				    ;skipEnemyCollision:
				    ;    cmp esi, OFFSET enemyPosArray + (NUM_ENEMIES - 1) * TYPE COORD  ; Check if it is the last enemy
				    ;    je endEnemyCollision
				    ;    add esi, TYPE COORD
				    ;    inc edi
				    ;    loop checkEnemyCollision
				    ;endEnemyCollision:
				    ;;;


				    ;;
				        ; Check for collision with airplane
				       ; mov ecx, NUM_ENEMIES
				        ;mov esi, OFFSET enemyBulletPosArray
				        ;mov edi, OFFSET enemyBulletActiveArray
				    ;checkAirplaneCollision:
				     ;   cmp byte ptr [edi], 0
				      ;  je skipAirplaneCollision
				       ; mov ax, (COORD PTR [esi]).x
				        ;cmp ax, airplanePos.x
				      ;  jne skipAirplaneCollision
				      ;  mov ax, (COORD PTR [esi]).y
				      ;  cmp ax, airplanePos.y
				      ;  jne skipAirplaneCollision
				        ; If collision, decrease life and deactivate bullet
				      ;  dec life
				       ; mov byte ptr [edi], 0
				    ;skipAirplaneCollision:
				        ;cmp esi, OFFSET enemyBulletPosArray + (NUM_ENEMIES - 1) * TYPE COORD ; Check if it is the last enemy bullet
				        ;je endairplaneCollision
				        ;add esi, TYPE COORD
				        ;inc edi
				        ;loop checkAirplaneCollision
				    ;endairplaneCollision:
				    ;;;

				        ; If life is 0, end the game
 000003D5  83 3D 00000084 R	        cmp life, 0
	   00
 000003DC  0F 85 FFFFFC39	        jne gameLoop

 000003E2			    endGame:
				        ; Display game over message
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR GameOverMsg, 5, lifePos, ADDR count
				        INVOKE Sleep, 50
				        
				        
				        exit
 0000040D			main ENDP
				END main
Microsoft (R) Macro Assembler Version 14.42.34435.0	    12/21/24 16:25:02
main.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000009F Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000040D Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetAsyncKeyState . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleOutputCP . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000040D Public STDCALL
  gameLoop . . . . . . . . . . .	L Near	 0000001B _TEXT	
  drawlife3  . . . . . . . . . .	L Near	 0000003B _TEXT	
  drawlife2  . . . . . . . . . .	L Near	 0000005A _TEXT	
  drawlife1  . . . . . . . . . .	L Near	 00000079 _TEXT	
  drawAirplane . . . . . . . . .	L Near	 00000098 _TEXT	
  skipBullet . . . . . . . . . .	L Near	 0000017B _TEXT	
  drawenemy1 . . . . . . . . . .	L Near	 0000017B _TEXT	
  bulletdrop1  . . . . . . . . .	L Near	 000001DC _TEXT	
  drawEnemy2 . . . . . . . . . .	L Near	 000001E3 _TEXT	
  bulletdrop2  . . . . . . . . .	L Near	 00000244 _TEXT	
  drawEnemy3 . . . . . . . . . .	L Near	 0000024B _TEXT	
  bulletdrop3  . . . . . . . . .	L Near	 000002AC _TEXT	
  drawEnemy4 . . . . . . . . . .	L Near	 000002B3 _TEXT	
  bulletdrop4  . . . . . . . . .	L Near	 00000314 _TEXT	
  endDrawEnemies . . . . . . . .	L Near	 0000031B _TEXT	
  checkRight . . . . . . . . . .	L Near	 0000033C _TEXT	
  checkShoot . . . . . . . . . .	L Near	 0000035D _TEXT	
  updateBullet . . . . . . . . .	L Near	 00000395 _TEXT	
  endUpdate  . . . . . . . . . .	L Near	 000003A6 _TEXT	
  checkEnemyCollision1 . . . . .	L Near	 000003AD _TEXT	
  checkEnemyCollision2 . . . . .	L Near	 000003D5 _TEXT	
  endGame  . . . . . . . . . . .	L Near	 000003E2 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MarginSize . . . . . . . . . . .	Number	 0000000Fh   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
ScreenHeight . . . . . . . . . .	Number	 0000001Eh   
ScreenWidth  . . . . . . . . . .	Number	 00000082h   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
airplaneDraw1  . . . . . . . . .	Byte	 00000000 _DATA	
airplaneDraw2  . . . . . . . . .	Byte	 00000008 _DATA	
airplaneDraw3  . . . . . . . . .	Byte	 00000013 _DATA	
airplaneDraw4  . . . . . . . . .	Byte	 00000020 _DATA	
airplaneDraw5  . . . . . . . . .	Byte	 00000029 _DATA	
airplanePos  . . . . . . . . . .	COORD	 00000038 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
bulletPos  . . . . . . . . . . .	COORD	 0000003C _DATA	
bullet . . . . . . . . . . . . .	Byte	 00000033 _DATA	
bytesWritten . . . . . . . . . .	DWord	 00000070 _DATA	
count  . . . . . . . . . . . . .	DWord	 00000074 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
enemy1 . . . . . . . . . . . . .	Byte	 00000040 _DATA	
enemy2 . . . . . . . . . . . . .	Byte	 00000042 _DATA	
enemy3 . . . . . . . . . . . . .	Byte	 00000044 _DATA	
enemy4 . . . . . . . . . . . . .	Byte	 00000046 _DATA	
enemyActive1 . . . . . . . . . .	Byte	 00000068 _DATA	
enemyActive2 . . . . . . . . . .	Byte	 00000069 _DATA	
enemyActive3 . . . . . . . . . .	Byte	 0000006A _DATA	
enemyActive4 . . . . . . . . . .	Byte	 0000006B _DATA	
enemyBullet1 . . . . . . . . . .	Byte	 00000041 _DATA	
enemyBullet2 . . . . . . . . . .	Byte	 00000043 _DATA	
enemyBullet3 . . . . . . . . . .	Byte	 00000045 _DATA	
enemyBullet4 . . . . . . . . . .	Byte	 00000047 _DATA	
enemyBulletPos1  . . . . . . . .	COORD	 0000004C _DATA	
enemyBulletPos2  . . . . . . . .	COORD	 00000054 _DATA	
enemyBulletPos3  . . . . . . . .	COORD	 0000005C _DATA	
enemyBulletPos4  . . . . . . . .	COORD	 00000064 _DATA	
enemyPos1  . . . . . . . . . . .	COORD	 00000048 _DATA	
enemyPos2  . . . . . . . . . . .	COORD	 00000050 _DATA	
enemyPos3  . . . . . . . . . . .	COORD	 00000058 _DATA	
enemyPos4  . . . . . . . . . . .	COORD	 00000060 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gameOverMsg  . . . . . . . . . .	Byte	 00000095 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
initialAirplanePos . . . . . . .	COORD	 00000034 _DATA	
key  . . . . . . . . . . . . . .	DWord	 00000078 _DATA	
lifePos  . . . . . . . . . . . .	COORD	 00000091 _DATA	
lifeSymbol1  . . . . . . . . . .	Byte	 00000088 _DATA	
lifeSymbol2  . . . . . . . . . .	Byte	 0000008A _DATA	
lifeSymbol3  . . . . . . . . . .	Byte	 0000008D _DATA	
life . . . . . . . . . . . . . .	DWord	 00000084 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
outputHandle . . . . . . . . . .	DWord	 0000006C _DATA	
randomX  . . . . . . . . . . . .	DWord	 0000007C _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
score  . . . . . . . . . . . . .	DWord	 00000080 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
