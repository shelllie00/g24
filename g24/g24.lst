Microsoft (R) Macro Assembler Version 14.42.34435.0	    12/22/24 22:58:34
main.asm						     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data
				; Define BoxSize
 = 0000000F			MarginSize = 15 ; Margin size
 = 00000082			ScreenWidth = 130
 = 0000001E			ScreenHeight = 30


				; Define airplane
 00000000 20 20 20 20 20	airplaneDraw1 BYTE ' ', ' ', ' ', ' ', ' ', '/', 5ch, 0
	   2F 5C 00
 00000008 20 20 5F 5F 2F	airplaneDraw2 BYTE ' ', ' ', '_', '_', '/', ' ', ' ', 5ch, '_', '_', 0
	   20 20 5C 5F 5F
	   00
 00000013 2F 5F 5F 5F 5F	airplaneDraw3 BYTE '/', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 5ch, 0
	   5F 5F 5F 5F 5F
	   5F 5C 00
 00000020 20 20 20 20 7C	airplaneDraw4 BYTE  ' ',' ',' ', ' ', '|', ' ', ' ', '|', 0
	   20 20 7C 00
 00000029 20 20 20 2F 5F	airplaneDraw5 BYTE  ' ',' ', ' ', '/', '_', '|', '|', '_', 5ch, 0
	   7C 7C 5F 5C 00
 00000033 2A			bullet BYTE '*'
 00000034 0041 001C		initialAirplanePos COORD <ScreenWidth / 2, ScreenHeight - 2>
 00000038 0041 001C		airplanePos COORD <ScreenWidth / 2, ScreenHeight - 2>
 0000003C 0000 0000		bulletPos COORD <0, 0>

				; Define enemies
 00000040 20 5F 5F 5F 5F	enemyShape1draw1 BYTE ' ______', 0
	   5F 5F 00
 00000048 7C 20 4F 20 20	enemyShape1draw2 BYTE '| O  O |', 0
	   4F 20 7C 00
 00000051 7C 20 20 3C 3E	enemyShape1draw3 BYTE '|  <>  |', 0
	   20 20 7C 00
 0000005A 7C 20 20 5C 2F	enemyShape1draw4 BYTE '|  \/  |', 0
	   20 20 7C 00
 00000063 7C 5F 5F 5F 5F	enemyShape1draw5 BYTE '|______|', 0
	   5F 5F 7C 00

 0000006C 20 20 5F 5F 5F	enemyShape2draw1 BYTE '  _____', 0
	   5F 5F 00
 00000074 20 2F 20 20 20	enemyShape2draw2 BYTE ' /     \ ', 0
	   20 20 5C 20 00
 0000007E 7C 20 20 20 20	enemyShape2draw3 BYTE '|       |', 0
	   20 20 20 7C 00
 00000088 20 5C 5F 5F 5F	enemyShape2draw4 BYTE ' \_____/ ', 0
	   5F 5F 2F 20 00
 00000092 20 20 28 20 20	enemyShape2draw5 BYTE '  (   )', 0
	   20 29 00

 0000009A 20 20 20 28 20	enemyShape3draw1 BYTE '   ( )   ', 0
	   29 20 20 20 00
 000000A4 20 2F 20 20 20	enemyShape3draw2 BYTE ' /     \ ', 0
	   20 20 5C 20 00
 000000AE 7C 20 20 20 2A	enemyShape3draw3 BYTE '|   *   | ', 0
	   20 20 20 7C 20
	   00
 000000B9 20 5C 20 20 20	enemyShape3draw4 BYTE ' \     / ', 0
	   20 20 2F 20 00
 000000C3 20 20 5C 5F 5F	enemyShape3draw5 BYTE '  \___/ ' , 0
	   5F 2F 20 00


 000000CC 20 5F 5F 5F 5F	enemyShape4draw1 BYTE ' _______', 0
	   5F 5F 5F 00
 000000D5 7C 20 20 4F 20	enemyShape4draw2 BYTE '|  O O  |', 0
	   4F 20 20 7C 00
 000000DF 7C 20 20 20 5E	enemyShape4draw3 BYTE '|   ^   |', 0
	   20 20 20 7C 00
 000000E9 7C 20 20 5C 5F	enemyShape4draw4 BYTE '|  \_/  |', 0
	   2F 20 20 7C 00
 000000F3 20 5C 5F 5F 5F	enemyShape4draw5 BYTE ' \_____/ ', 0
	   5F 5F 2F 20 00


 000000FD 6F			enemyBullet1 BYTE 'o'
 000000FE 6F			enemyBullet2 BYTE 'o'
 000000FF 6F			enemyBullet3 BYTE 'o'
 00000100 6F			enemyBullet4 BYTE 'o'

				; Define enemy positions and bullets
 00000101 001A 0007		enemyPos1 COORD <26, 7>
 00000105 001E 0005		enemyBulletPos1 COORD <30, 5>
 00000109 002E 0007		enemyPos2 COORD <46, 7>
 0000010D 0032 0005		enemyBulletPos2 COORD <50, 5>
 00000111 004C 0007		enemyPos3 COORD <76, 7>
 00000115 0050 0005		enemyBulletPos3 COORD <80, 5>
 00000119 0060 0007		enemyPos4 COORD <96, 7>
 0000011D 0064 0005		enemyBulletPos4 COORD <100, 5>
 00000121 01			enemyActive1 BYTE 1
 00000122 01			enemyActive2 BYTE 1
 00000123 01			enemyActive3 BYTE 1
 00000124 01			enemyActive4 BYTE 1


				;Define "PRESS TO START"
 00000125 0032 0014		startPos COORD <50,20>
 00000129 2B 2D 2D 2D 2D	startMessage1 BYTE '+','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','+',0  ; Start message with '+' and '-'
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2B 00
 0000013C 7C 20 50 52 45	startMessage2 BYTE '|',' ','P','R','E','S','S',' ','T','O',' ','S','T','A','R','T',' ','|',0  ; Press to start message
	   53 53 20 54 4F
	   20 53 54 41 52
	   54 20 7C 00

				;Define enemy for start scene
 0000014F 002A 000C		startEnemyPos COORD <42,12>
 00000153 002A 0009		startEnemyfacePos COORD <42,9>
 00000157 20 20 20 20 20	startEnemy1 BYTE '           @      @',0
	   20 20 20 20 20
	   20 40 20 20 20
	   20 20 20 40 00
 0000016B 20 20 20 2F 20	startEnemy2 BYTE '   / \     { _____}      / \',0    
	   5C 20 20 20 20
	   20 7B 20 5F 5F
	   5F 5F 5F 7D 20
	   20 20 20 20 20
	   2F 20 5C 00
 00000188 20 2F 20 20 7C	startEnemy3 BYTE ' /  |  \___/*******\___/  |  \   ',0   
	   20 20 5C 5F 5F
	   5F 2F 2A 2A 2A
	   2A 2A 2A 2A 5C
	   5F 5F 5F 2F 20
	   20 7C 20 20 5C
	   20 20 20 00
 000001AA 28 20 20 20 49	startEnemy4 BYTE '(   I  /   ~   -   ~   \  I   )',0  
	   20 20 2F 20 20
	   20 7E 20 20 20
	   2D 20 20 20 7E
	   20 20 20 5C 20
	   20 49 20 20 20
	   29 00
 000001CA 20 5C 20 20 7C	startEnemyface1 BYTE ' \  |  |   0       0   |  |  /',0  
	   20 20 7C 20 20
	   20 30 20 20 20
	   20 20 20 20 30
	   20 20 20 7C 20
	   20 7C 20 20 2F
	   00
 000001E9 20 20 20 5C 20	startEnemy6 BYTE '   \   |       A       |   /',0     
	   20 20 7C 20 20
	   20 20 20 20 20
	   41 20 20 20 20
	   20 20 20 7C 20
	   20 20 2F 00
 00000206 20 20 20 20 20	startEnemy7 BYTE '     \__    _______    __/',0       
	   5C 5F 5F 20 20
	   20 20 5F 5F 5F
	   5F 5F 5F 5F 20
	   20 20 20 5F 5F
	   2F 00
 00000221 20 20 20 20 20	startEnemy8 BYTE '        \_____________/ ',0    
	   20 20 20 5C 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 2F 20 00
 0000023A 20 5C 20 20 7C	startEnemyface2 BYTE ' \  |  |   >       <   |  |  /',0  
	   20 20 7C 20 20
	   20 3E 20 20 20
	   20 20 20 20 3C
	   20 20 20 7C 20
	   20 7C 20 20 2F
	   00

				;Define boundary
 00000259 7C 7C			boundary BYTE '||'
 0000025B 000D 0000		boundaryPosLeft COORD <13, 0>
 0000025F 0000 0000		boundaryPosRight COORD <0 , 0>
 00000263 00			boundaryDrawn BYTE 0

				;addLife
 00000264 24			addLife BYTE '$'
 00000265 0019 0005		addLifePos COORD <25 , 5>  
 00000269 00A9			addLifeColor WORD 0A9h     
 0000026B 0021 0055 0070	dropPos WORD 33,85,112,78,90,35,110,17
	   004E 005A 0023
	   006E 0011
 0000027B 0000			flag WORD 0

				;bomb (minus 2 life)
 0000027D 23			bomb BYTE '#'
 0000027E 004D 0005		bombPos COORD <77 , 5>  
 00000282 00C9			bombColor WORD 0C9h     
 00000284 0042 002C 0021	dropBombPos WORD 66,44,33,99,41,28,100,50
	   0063 0029 001C
	   0064 0032
 00000294 0000			flagBomb WORD 0

				;bomb2 (minus 1 life)
 00000296 21			bomb2 BYTE '!'
 00000297 0014 0005		bombPos2 COORD <20 , 5>  
 0000029B 00E9			bombColor2 WORD 0E9h    
 0000029D 002C 0037 0016	dropBombPos2 WORD 44,55,22,99,88,101,66,77
	   0063 0058 0065
	   0042 004D
 000002AD 0000			flagBomb2 WORD 0

				; Define "WIN!" 
 000002AF 0037 000F		winPos COORD <55,15>
 000002B3 5F 5F 20 20 20	winDraw1 BYTE '_','_',' ',' ',' ',' ',' ',' ',' ',' ','_','_','_','_','_',' ','_',' ',' ',' ','_',' ',' ',' ','_',0 
	   20 20 20 20 20
	   5F 5F 5F 5F 5F
	   20 5F 20 20 20
	   5F 20 20 20 5F
	   00
 000002CD 5C 20 5C 20 20	winDraw2 BYTE 5ch,' ',5ch,' ',' ',' ',' ',' ',' ','/',' ','/','_',' ','_',7ch,' ',5ch,' ',7ch,' ',7ch,' ',7ch,' ',7ch,0
	   20 20 20 20 2F
	   20 2F 5F 20 5F
	   7C 20 5C 20 7C
	   20 7C 20 7C 20
	   7C 00
 000002E8 20 5C 20 5C 20	winDraw3 BYTE ' ',5ch,' ',5ch,' ','/',5ch,' ','/',' ','/',' ',7ch,' ',7ch,7ch,' ',' ',5ch,7ch,' ',7ch,' ',7ch,' ',7ch,0
	   2F 5C 20 2F 20
	   2F 20 7C 20 7C
	   7C 20 20 5C 7C
	   20 7C 20 7C 20
	   7C 00
 00000303 20 20 5C 20 56	winDraw4 BYTE ' ',' ',5ch,' ','V',' ',' ','V',' ','/',' ',' ',7ch,' ',7ch,7ch,' ',7ch,5ch,' ',' ',7ch,' ',7ch,'_',7ch,0
	   20 20 56 20 2F
	   20 20 7C 20 7C
	   7C 20 7C 5C 20
	   20 7C 20 7C 5F
	   7C 00
 0000031E 20 20 20 5C 5F	winDraw5 BYTE ' ',' ',' ',5ch,'_','/',5ch,'_','/',' ',' ',7ch,'_','_','_',7ch,'_',7ch,' ',5ch,'_',7ch,' ','(','_',')',0
	   2F 5C 5F 2F 20
	   20 7C 5F 5F 5F
	   7C 5F 7C 20 5C
	   5F 7C 20 28 5F
	   29 00

				; Define "LOSE"
 00000339 0037 000F		losePos COORD <55,15>
 0000033D 20 5F 20 20 20	loseDraw1 BYTE ' ','_',' ',' ',' ',' ',' ','_','_','_',' ',' ','_','_','_','_',' ',' ','_','_','_','_','_',' ',' ',' ','_',' ',0
	   20 20 5F 5F 5F
	   20 20 5F 5F 5F
	   5F 20 20 5F 5F
	   5F 5F 5F 20 20
	   20 5F 20 00
 0000035A 7C 20 7C 20 20	loseDraw2 BYTE '|',' ',7ch,' ',' ',' ','/',' ','_',' ',5ch,'/',' ','_','_','_',7ch,7ch,' ','_','_','_','_',7ch,' ',7ch,' ',7ch,0
	   20 2F 20 5F 20
	   5C 2F 20 5F 5F
	   5F 7C 7C 20 5F
	   5F 5F 5F 7C 20
	   7C 20 7C 00
 00000377 7C 20 7C 20 20	loseDraw3 BYTE '|',' ',7ch,' ',' ',7ch,' ',7ch,' ',7ch,' ',5ch,'_','_','_',' ',5ch,7ch,' ',' ','_',7ch,' ',' ',' ',7ch,' ',7ch,0
	   7C 20 7C 20 7C
	   20 5C 5F 5F 5F
	   20 5C 7C 20 20
	   5F 7C 20 20 20
	   7C 20 7C 00
 00000394 7C 20 7C 5F 5F	loseDraw4 BYTE '|',' ',7ch,'_','_',7ch,' ',7ch,'_',7ch,' ',7ch,'_','_','_',')',' ',7ch,' ',7ch,'_','_','_',' ',' ',7ch,'_',7ch,0
	   7C 20 7C 5F 7C
	   20 7C 5F 5F 5F
	   29 20 7C 20 7C
	   5F 5F 5F 20 20
	   7C 5F 7C 00
 000003B1 7C 5F 5F 5F 5F	loseDraw5 BYTE '|','_','_','_','_','_',5ch,'_','_','_','/',7ch,'_','_','_','_','/',7ch,'_','_','_','_','_',7ch,' ','(','_',')',0
	   5F 5C 5F 5F 5F
	   2F 7C 5F 5F 5F
	   5F 2F 7C 5F 5F
	   5F 5F 5F 7C 20
	   28 5F 29 00


				; Define others
 000003CE 00000000		outputHandle DWORD 0
 000003D2 00000000		bytesWritten DWORD 0
 000003D6 0082 001E		screenBuffer COORD <130,30>
 000003DA 00000000		count DWORD 0

				; Define lives
 000003DE 00000003		life DWORD 3
 000003E2 48 50 3A 03 00	lifeSymbol1 BYTE 'H','P',':',03h,0
 000003E7 48 50 3A 03 03	lifeSymbol2 BYTE 'H','P',':',03h, 03h, 0
	   00
 000003ED 48 50 3A 03 03	lifeSymbol3 BYTE 'H','P',':',03h, 03h, 03h, 0
	   03 00
 000003F4 0005 0003		lifePos COORD <5, 3>

 = start@0			main EQU start@0

 00000000			.code
				SetConsoleOutputCP PROTO STDCALL :DWORD
				GetAsyncKeyState PROTO STDCALL :DWORD
				Random PROTO min:WORD, max:WORD


 00000000			main PROC
				    ; Initialize console
				    INVOKE SetConsoleOutputCP, 65001 ; Set console output to UTF-8
				    INVOKE GetStdHandle, STD_OUTPUT_HANDLE
 00000011  A3 000003CE R	    mov outputHandle, eax
 00000016  E8 00000000 E	    call Clrscr
					

				    ; Draw Start Message
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR startMessage1, LENGTHOF startMessage1, startPos, ADDR count
 00000038  66| FF 0D				dec startPos.y
	   00000127 R
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR startMessage2, LENGTHOF startMessage2, startPos, ADDR count
 0000005C  66| FF 0D				dec startPos.y
	   00000127 R
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR startMessage1, LENGTHOF startMessage1, startPos, ADDR count
 00000080  66| FF 0D				dec startPos.y
	   00000127 R
 00000087  66| 83 05				add startPos.y, 3
	   00000127 R 03

				    ;Draw enemypic
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR startEnemy8, LENGTHOF startEnemy8, startEnemyPos, ADDR count
 000000AC  66| FF 0D				dec startEnemyPos.y
	   00000151 R
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR startEnemy7, LENGTHOF startEnemy7, startEnemyPos, ADDR count
 000000D0  66| FF 0D				dec startEnemyPos.y
	   00000151 R
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR startEnemy6, LENGTHOF startEnemy6, startEnemyPos, ADDR count
 000000F4  66| FF 0D				dec startEnemyPos.y
	   00000151 R
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR startEnemyface1, LENGTHOF startEnemyface1, startEnemyPos, ADDR count
 00000118  66| FF 0D				dec startEnemyPos.y
	   00000151 R
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR startEnemy4, LENGTHOF startEnemy4, startEnemyPos, ADDR count
 0000013C  66| FF 0D				dec startEnemyPos.y
	   00000151 R
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR startEnemy3, LENGTHOF startEnemy3, startEnemyPos, ADDR count
 00000160  66| FF 0D				dec startEnemyPos.y
	   00000151 R
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR startEnemy2, LENGTHOF startEnemy2, startEnemyPos, ADDR count
 00000184  66| FF 0D				dec startEnemyPos.y
	   00000151 R
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR startEnemy1, LENGTHOF startEnemy1, startEnemyPos, ADDR count
 000001A8  66| FF 0D		        dec startEnemyPos.y
	   00000151 R
 000001AF  66| 83 05				add startEnemyPos.y, 8
	   00000151 R 08



 000001B7			    WaitForStart:
				        ; Get current time-stamp counter value
 000001B7  0F 31		        rdtsc               ; edx:eax = time-stamp counter
				        ; We will use the lower bit (least significant bit) to generate 0 or 1
 000001B9  B9 00000032		        mov ecx, 50          ; Load divisor (5) into ecx
 000001BE  33 D2		        xor edx, edx        ; Clear edx (required for division)
 000001C0  F7 F1		        div ecx             ; eax = eax / 5, edx = eax % 5 (remainder)

 000001C2  83 FA 00		        cmp edx, 0          ; Compare remainder (edx) with 0
 000001C5  74 1F		        je face2
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR startEnemyface1, LENGTHOF startEnemyface1, startEnemyfacePos, ADDR count
 000001E4  EB 1D		        jmp continue
 000001E6			        face2:
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR startEnemyface2, LENGTHOF startEnemyface2, startEnemyfacePos, ADDR count
 00000203			        continue:
				        ;keep waiting for press to start 
				        ; Wait for player to press space to start
				        INVOKE GetAsyncKeyState, VK_SPACE ; Check if any key is pressed 
 0000020A  66| A9 8000		        test ax, 8000h              ; Test if the high bit is set (meaning key is pressed)
 0000020E  74 A7		        jz WaitForStart


				    ; Main game loop
 00000210			    gameLoop:
				        ; Clear screen
 00000210  E8 00000000 E	        call Clrscr
						
						;Draw boundary
 00000215  66| C7 05				mov boundaryPosRight.x, ScreenWidth - 13
	   0000025F R
	   0075
 0000021E  66| C7 05				mov boundaryPosLeft.y,3
	   0000025D R
	   0003
 00000227  66| C7 05				mov boundaryPosRight.y,3
	   00000261 R
	   0003
						
 00000230					DrawBoundaryLeft:
							INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR boundary, 2, boundaryPosLeft, ADDR count
 0000024D  66| FF 05					inc boundaryPosLeft.y
	   0000025D R
 00000254  66| 83 3D					cmp boundaryPosLeft.y, ScreenHeight-2
	   0000025D R 1C
 0000025C  7D 02					jge DrawBoundaryRight
 0000025E  EB D0					jmp DrawBoundaryLeft
						
 00000260					DrawBoundaryRight:
							INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR boundary, 2, boundaryPosRight, ADDR count
 0000027D  66| FF 05					inc boundaryPosRight.y
	   00000261 R
 00000284  66| 83 3D					cmp boundaryPosRight.y, ScreenHeight-2
	   00000261 R 1C
 0000028C  7D 02					jge EndBoundaryDrawing
 0000028E  EB D0					jmp DrawBoundaryRight
							
 00000290					EndBoundaryDrawing:
						
				        ; Draw life
 00000290  83 3D 000003DE R	        cmp life, 3
	   03
 00000297  74 12		        je drawlife3
 00000299  83 3D 000003DE R	        cmp life, 2
	   02
 000002A0  74 28		        je drawlife2
 000002A2  83 3D 000003DE R	        cmp life, 1
	   01
 000002A9  74 3E		        je drawlife1

				    ; Draw life
 000002AB			    drawlife3:
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR lifeSymbol3, 6, lifePos, ADDR count
 000002C8  EB 3E		        jmp drawAirplane
 000002CA			    drawlife2:
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR lifeSymbol2, 5, lifePos, ADDR count
 000002E7  EB 1F		        jmp drawAirplane
 000002E9			    drawlife1:
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR lifeSymbol1, 4, lifePos, ADDR count
 00000306  EB 00		        jmp drawAirplane
					
					

				    ; Draw airplane
 00000308			    drawAirplane:
				        INVOKE WriteConsoleOutputCharacter,
				               outputHandle, ADDR airplaneDraw5, LENGTHOF airplaneDraw5, airplanePos, ADDR count
 00000325  66| FF 0D		        dec airplanePos.y
	   0000003A R
				        INVOKE WriteConsoleOutputCharacter,
				               outputHandle, ADDR airplaneDraw4, LENGTHOF airplaneDraw4, airplanePos, ADDR count
 00000349  66| FF 0D		        dec airplanePos.y
	   0000003A R
				        INVOKE WriteConsoleOutputCharacter,
				               outputHandle, ADDR airplaneDraw3, LENGTHOF airplaneDraw3, airplanePos, ADDR count
 0000036D  66| FF 0D		        dec airplanePos.y
	   0000003A R
				        INVOKE WriteConsoleOutputCharacter,
				               outputHandle, ADDR airplaneDraw2, LENGTHOF airplaneDraw2, airplanePos, ADDR count
 00000391  66| FF 0D		        dec airplanePos.y
	   0000003A R
				        INVOKE WriteConsoleOutputCharacter,
				               outputHandle, ADDR airplaneDraw1, LENGTHOF airplaneDraw1, airplanePos, ADDR count
 000003B5  66| FF 0D		        dec airplanePos.y
	   0000003A R
 000003BC  66| 83 05		        add airplanePos.y, 5 ; Add back 5 to airplanePos.y
	   0000003A R 05
							

				        ; Draw my bullet if active
 000003C4  66| 83 3D		        cmp bulletPos.y, 0
	   0000003E R 00
 000003CC  74 1D		        je skipBullet
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR bullet, 1, bulletPos, ADDR count
 000003EB			    skipBullet:
					
					

				        ; Draw enemies and their bullets
 000003EB			    drawenemy1:
 000003EB  80 3D 00000121 R	        cmp enemyActive1, 0 ; Check if enemy is active 
	   00
 000003F2  0F 84 000000FE	        je drawEnemy2
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape1draw5, LENGTHOF enemyShape1draw5, enemyPos1, ADDR count
 00000415  66| FF 0D				dec enemyPos1.y
	   00000103 R
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape1draw4, LENGTHOF enemyShape1draw4, enemyPos1, ADDR count
 00000439  66| FF 0D				dec enemyPos1.y
	   00000103 R
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape1draw3, LENGTHOF enemyShape1draw3, enemyPos1, ADDR count
 0000045D  66| FF 0D				dec enemyPos1.y
	   00000103 R
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape1draw2, LENGTHOF enemyShape1draw3, enemyPos1, ADDR count
 00000481  66| FF 0D				dec enemyPos1.y
	   00000103 R
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape1draw1, LENGTHOF enemyShape1draw1, enemyPos1, ADDR count
 000004A5  66| FF 0D				dec enemyPos1.y
	   00000103 R
 000004AC  66| 83 05				add enemyPos1.y, 5 
	   00000103 R 05
						
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyBullet1, 1, enemyBulletPos1, ADDR count
 000004D1  66| 83 3D		        cmp enemyBulletPos1.y, ScreenHeight-5 ; Check if enemy bullet is at the bottom of the screen
	   00000107 R 19
 000004D9  7E 14		        jle bulletdrop1
 000004DB  66| C7 05		        mov enemyBulletPos1.x, 30 ; Reset enemyBullet1 position
	   00000105 R
	   001E
 000004E4  66| C7 05		        mov enemyBulletPos1.y, 5
	   00000107 R
	   0005
 000004ED  EB 07		        jmp drawEnemy2
 000004EF			        bulletdrop1:
 000004EF  66| FF 05		        inc enemyBulletPos1.y ; Bullet drop
	   00000107 R

 000004F6			    drawEnemy2:
 000004F6  80 3D 00000122 R	        cmp enemyActive2, 0 ; Check if enemy is active
	   00
 000004FD  0F 84 000000FE	        je drawEnemy3
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape2draw5, LENGTHOF enemyShape2draw5, enemyPos2, ADDR count
 00000520  66| FF 0D				dec enemyPos2.y
	   0000010B R
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape2draw4, LENGTHOF enemyShape2draw4, enemyPos2, ADDR count
 00000544  66| FF 0D				dec enemyPos2.y
	   0000010B R
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape2draw3, LENGTHOF enemyShape2draw3, enemyPos2, ADDR count
 00000568  66| FF 0D				dec enemyPos2.y
	   0000010B R
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape2draw2, LENGTHOF enemyShape2draw3, enemyPos2, ADDR count
 0000058C  66| FF 0D				dec enemyPos2.y
	   0000010B R
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape2draw1, LENGTHOF enemyShape2draw1, enemyPos2, ADDR count
 000005B0  66| FF 0D				dec enemyPos2.y
	   0000010B R
 000005B7  66| 83 05				add enemyPos2.y, 5 
	   0000010B R 05
						
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyBullet2, 1, enemyBulletPos2, ADDR count
 000005DC  66| 83 3D		        cmp enemyBulletPos2.y, ScreenHeight-5 ; Check if enemy bullet is at the bottom of the screen
	   0000010F R 19
 000005E4  7E 14		        jle bulletdrop2
 000005E6  66| C7 05		        mov enemyBulletPos2.x, 50 ; Reset enemyBullet2 position
	   0000010D R
	   0032
 000005EF  66| C7 05		        mov enemyBulletPos2.y, 5
	   0000010F R
	   0005
 000005F8  EB 07		        jmp drawEnemy3
 000005FA			        bulletdrop2:
 000005FA  66| FF 05		        inc enemyBulletPos2.y ; Bullet drop
	   0000010F R
				     
 00000601			    drawEnemy3:
 00000601  80 3D 00000123 R	        cmp enemyActive3, 0 ; Check if enemy is active
	   00
 00000608  0F 84 000000FE	        je drawEnemy4
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape3draw5, LENGTHOF enemyShape3draw5, enemyPos3, ADDR count
 0000062B  66| FF 0D				dec enemyPos3.y
	   00000113 R
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape3draw4, LENGTHOF enemyShape1draw3, enemyPos3, ADDR count
 0000064F  66| FF 0D				dec enemyPos3.y
	   00000113 R
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape3draw3, LENGTHOF enemyShape1draw3, enemyPos3, ADDR count
 00000673  66| FF 0D				dec enemyPos3.y
	   00000113 R
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape3draw2, LENGTHOF enemyShape1draw3, enemyPos3, ADDR count
 00000697  66| FF 0D				dec enemyPos3.y
	   00000113 R
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape3draw1, LENGTHOF enemyShape1draw3, enemyPos3, ADDR count
 000006BB  66| FF 0D				dec enemyPos3.y
	   00000113 R
 000006C2  66| 83 05				add enemyPos3.y, 5
	   00000113 R 05
						
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyBullet3, 1, enemyBulletPos3, ADDR count
 000006E7  66| 83 3D		        cmp enemyBulletPos3.y, ScreenHeight-5 ; Check if enemy bullet is at the bottom of the screen
	   00000117 R 19
 000006EF  7E 14		        jle bulletdrop3
 000006F1  66| C7 05		        mov enemyBulletPos3.x, 80 ; Reset enemyBullet3 position
	   00000115 R
	   0050
 000006FA  66| C7 05		        mov enemyBulletPos3.y, 5
	   00000117 R
	   0005
 00000703  EB 07		        jmp drawEnemy4
 00000705			        bulletdrop3:
 00000705  66| FF 05		        inc enemyBulletPos3.y ; Bullet drop
	   00000117 R

 0000070C			    drawEnemy4:
 0000070C  80 3D 00000124 R	        cmp enemyActive4, 0 ; Check if enemy is active
	   00
 00000713  0F 84 000000FE	        je endDrawEnemies
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape4draw5, LENGTHOF enemyShape4draw5, enemyPos4, ADDR count
 00000736  66| FF 0D				dec enemyPos4.y
	   0000011B R
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape4draw4, LENGTHOF enemyShape4draw4, enemyPos4, ADDR count
 0000075A  66| FF 0D				dec enemyPos4.y
	   0000011B R
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape4draw3, LENGTHOF enemyShape4draw3, enemyPos4, ADDR count
 0000077E  66| FF 0D				dec enemyPos4.y
	   0000011B R
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape4draw2, LENGTHOF enemyShape4draw3, enemyPos4, ADDR count
 000007A2  66| FF 0D				dec enemyPos4.y
	   0000011B R
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape4draw1, LENGTHOF enemyShape4draw1, enemyPos4, ADDR count
 000007C6  66| FF 0D				dec enemyPos4.y
	   0000011B R
 000007CD  66| 83 05				add enemyPos4.y ,5
	   0000011B R 05
						
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyBullet4, 1, enemyBulletPos4, ADDR count
 000007F2  66| 83 3D		        cmp enemyBulletPos4.y, ScreenHeight-5 ; Check if enemy bullet is at the bottom of the screen
	   0000011F R 19
 000007FA  7E 14		        jle bulletdrop4
 000007FC  66| C7 05		        mov enemyBulletPos4.x, 100 ; Reset enemyBullet4 position
	   0000011D R
	   0064
 00000805  66| C7 05		        mov enemyBulletPos4.y, 5
	   0000011F R
	   0005
 0000080E  EB 07		        jmp endDrawEnemies
 00000810			        bulletdrop4:
 00000810  66| FF 05		        inc enemyBulletPos4.y ; Bullet drop
	   0000011F R

 00000817			    endDrawEnemies:
					
					; Draw addLife
 00000817				GenerateLife:
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR addLife, 1, addLifePos, ADDR count
						invoke WriteConsoleOutputAttribute, outputHandle, ADDR addLifeColor, 1, addLifePos, ADDR count
 00000851  66| 83 3D				cmp addLifePos.y, ScreenHeight-5 
	   00000267 R 19
 00000859  7E 34				jle addingLifeDrop
 0000085B  66| 83 3D				cmp flag,7
	   0000027B R 07
 00000863  7D 33				jge resetFlag
 00000865  0F B7 1D				movzx ebx ,flag
	   0000027B R
 0000086C  D1 E3				shl ebx, 1  ;mul by 2
 0000086E  BE 0000026B R			mov esi, OFFSET dropPos
 00000873  66| FF 05				inc flag 
	   0000027B R
 0000087A  66| 8B 04 1E				mov ax,[esi+ebx]
 0000087E  66| A3				mov addLifePos.x, ax 
	   00000265 R
 00000884  66| C7 05				mov addLifePos.y, 5      ; Start at the top of the screen
	   00000267 R
	   0005
 0000088D  EB 29				jmp EndGenerateLife
						
 0000088F					addingLifeDrop:
 0000088F  66| FF 05				inc addLifePos.y ; drop 
	   00000267 R
 00000896  EB 20				jmp EndGenerateLife
						
 00000898					resetFlag:
 00000898  66| C7 05					mov flag,0
	   0000027B R
	   0000
 000008A1  66| A1					mov ax,dropPos
	   0000026B R
 000008A7  66| A3					mov addLifePos.x, ax    
	   00000265 R
 000008AD  66| C7 05					mov addLifePos.y, 5      ; Start at the top of the screen
	   00000267 R
	   0005
 000008B6  EB 00					jmp EndGenerateLife
						
 000008B8				EndGenerateLife:
					
					; Draw bomb
 000008B8				BombDraw:
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR bomb, 1, bombPos, ADDR count
						invoke WriteConsoleOutputAttribute, outputHandle, ADDR bombColor, 1, bombPos, ADDR count
 000008F2  66| 83 3D				cmp bombPos.y, ScreenHeight-5 
	   00000280 R 19
 000008FA  7E 34				jle bombDrop
 000008FC  66| 83 3D				cmp flagBomb,7
	   00000294 R 07
 00000904  7D 33				jge resetBombFlag
 00000906  0F B7 1D				movzx ebx ,flagBomb
	   00000294 R
 0000090D  D1 E3				shl ebx, 1  ;mul by 2
 0000090F  BE 00000284 R			mov esi, OFFSET dropBombPos
 00000914  66| FF 05				inc flagBomb 
	   00000294 R
 0000091B  66| 8B 04 1E				mov ax,[esi+ebx]
 0000091F  66| A3				mov bombPos.x, ax 
	   0000027E R
 00000925  66| C7 05				mov bombPos.y, 5      ; Start at the top of the screen
	   00000280 R
	   0005
 0000092E  EB 26				jmp EndBomb
						
 00000930					bombDrop:
 00000930  66| FF 05				inc bombPos.y ; drop 
	   00000280 R
 00000937  EB 1D				jmp EndBomb
						
 00000939					resetBombFlag:
 00000939  66| C7 05					mov flagBomb,0
	   00000294 R
	   0000
 00000942  66| C7 05					mov bombPos.x, 55   
	   0000027E R
	   0037
 0000094B  66| C7 05					mov bombPos.y, 5      ; Start at the top of the screen
	   00000280 R
	   0005
 00000954  EB 00					jmp EndBomb
						
 00000956				EndBomb:
					
					; Draw bomb
 00000956				BombDraw2:
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR bomb2, 1, bombPos2, ADDR count
						invoke WriteConsoleOutputAttribute, outputHandle, ADDR bombColor2, 1, bombPos2, ADDR count
 00000990  66| 83 3D				cmp bombPos2.y, ScreenHeight-5 
	   00000299 R 19
 00000998  7E 34				jle bombDrop2
 0000099A  66| 83 3D				cmp flagBomb2,7
	   000002AD R 07
 000009A2  7D 33				jge resetBombFlag2
 000009A4  0F B7 1D				movzx ebx ,flagBomb2
	   000002AD R
 000009AB  D1 E3				shl ebx, 1  ;mul by 2
 000009AD  BE 0000029D R			mov esi, OFFSET dropBombPos2
 000009B2  66| FF 05				inc flagBomb2 
	   000002AD R
 000009B9  66| 8B 04 1E				mov ax,[esi+ebx]
 000009BD  66| A3				mov bombPos2.x, ax 
	   00000297 R
 000009C3  66| C7 05				mov bombPos2.y, 5      ; Start at the top of the screen
	   00000299 R
	   0005
 000009CC  EB 26				jmp EndBomb2
						
 000009CE					bombDrop2:
 000009CE  66| FF 05				inc bombPos2.y ; drop 
	   00000299 R
 000009D5  EB 1D				jmp EndBomb2
						
 000009D7					resetBombFlag2:
 000009D7  66| C7 05					mov flagBomb2,0
	   000002AD R
	   0000
 000009E0  66| C7 05					mov bombPos2.x,36 
	   00000297 R
	   0024
 000009E9  66| C7 05					mov bombPos2.y, 5      ; Start at the top of the screen
	   00000299 R
	   0005
 000009F2  EB 00					jmp EndBomb2
						
 000009F4				EndBomb2:
					
					
					
					
				        ; Handle input
				        INVOKE GetAsyncKeyState, VK_LEFT
 000009FB  66| A9 8000		        test ax, 8000h
 000009FF  74 14		        jz checkRight
 00000A01  66| 83 3D		        cmp airplanePos.x, MarginSize ; If airplanePos.x is at the left edge of the screen, do not move right
	   00000038 R 0F
 00000A09  7E 0A		        jle checkRight
 00000A0B  66| 83 2D		        sub airplanePos.x, 2
	   00000038 R 02
 00000A13  EB 21		        jmp checkShoot

 00000A15			    checkRight:
				        INVOKE GetAsyncKeyState, VK_RIGHT
 00000A1C  66| A9 8000		        test ax, 8000h
 00000A20  74 14		        jz checkShoot
 00000A22  66| 83 3D		        cmp airplanePos.x, ScreenWidth - MarginSize - 10; If airplanePos.x is at the right edge of the screen, do not move right
	   00000038 R 69
 00000A2A  7D 0A		        jge checkShoot
 00000A2C  66| 83 05		        add airplanePos.x, 2
	   00000038 R 02
 00000A34  EB 00		        jmp checkShoot
						
						
						
 00000A36				checkShoot:
				        INVOKE GetAsyncKeyState, VK_SPACE
 00000A3D  66| A9 8000		        test ax, 8000h
 00000A41  74 2B		        jz updateBullet
 00000A43  66| 8B 1D		        mov bx, airplanePos.x
	   00000038 R
 00000A4A  66| 83 C3 05		        add bx, 5 ; Adjust bullet position x
 00000A4E  66| 89 1D		        mov bulletPos.x, bx
	   0000003C R
 00000A55  66| 8B 1D		        mov bx, airplanePos.y
	   0000003A R
 00000A5C  66| 83 EB 03		        sub bx, 3 ; Adjust bullet position y
 00000A60  66| 89 1D		        mov bulletPos.y, bx
	   0000003E R
 00000A67  66| FF 0D		        dec bulletPos.y
	   0000003E R

 00000A6E			    updateBullet:
				        ; Update bullet position
 00000A6E  66| 83 3D		        cmp bulletPos.y, 0
	   0000003E R 00
 00000A76  74 07		        je endUpdate
 00000A78  66| FF 0D		        dec bulletPos.y
	   0000003E R
 00000A7F			    endUpdate:

				        ; Delay for a short period
				        INVOKE Sleep, 50
						
 00000A86				checkGetBomb:    
 00000A86  66| 83 3D		        cmp bombPos.y, ScreenHeight-5 
	   00000280 R 19
 00000A8E  7C 7C		        jl checkGetBomb2 
 00000A90  66| A1				mov ax, airplanePos.x
	   00000038 R
 00000A96  66| 83 E8 01		        sub ax, 1
 00000A9A  66| 39 05		        cmp bombPos.x, ax 
	   0000027E R
 00000AA1  7C 69		        jl checkGetBomb2 ; skip
 00000AA3  66| A1		        mov ax, airplanePos.x
	   00000038 R
 00000AA9  66| 83 C0 0A		        add ax, 10
 00000AAD  66| 39 05		        cmp bombPos.x, ax 
	   0000027E R
 00000AB4  7F 56		        jg checkGetBomb2 ; skip
 00000AB6  83 2D 000003DE R	        sub life,2   ; If no skip, then collision happen
	   02
 00000ABD  66| 83 3D				cmp flagBomb,7
	   00000294 R 07
 00000AC5  7D 2A				jge resetBombFlag3
 00000AC7  0F B7 1D				movzx ebx ,flagBomb
	   00000294 R
 00000ACE  D1 E3				shl ebx, 1  ;mul by 2
 00000AD0  BE 00000284 R			mov esi, OFFSET dropBombPos
 00000AD5  66| FF 05				inc flagBomb 
	   00000294 R
 00000ADC  66| 8B 04 1E				mov ax,[esi+ebx]
 00000AE0  66| A3				mov bombPos.x, ax 
	   0000027E R
 00000AE6  66| C7 05				mov bombPos.y, 5  
	   00000280 R
	   0005
						
 00000AEF  EB 1B				jmp checkGetBomb2   
						
 00000AF1					resetBombFlag3:
 00000AF1  66| C7 05					mov flagBomb,0
	   00000294 R
	   0000
 00000AFA  66| C7 05					mov bombPos.x, 54
	   0000027E R
	   0036
 00000B03  66| C7 05					mov bombPos.y, 5 
	   00000280 R
	   0005
							
 00000B0C				checkGetBomb2:    
 00000B0C  66| 83 3D		        cmp bombPos2.y, ScreenHeight-5 
	   00000299 R 19
 00000B14  7C 7B		        jl checkGetAddLife 
 00000B16  66| A1				mov ax, airplanePos.x
	   00000038 R
 00000B1C  66| 83 E8 01		        sub ax, 1
 00000B20  66| 39 05		        cmp bombPos2.x, ax 
	   00000297 R
 00000B27  7C 68		        jl checkGetAddLife ; skip
 00000B29  66| A1		        mov ax, airplanePos.x
	   00000038 R
 00000B2F  66| 83 C0 0A		        add ax, 10
 00000B33  66| 39 05		        cmp bombPos2.x, ax 
	   00000297 R
 00000B3A  7F 55		        jg checkGetAddLife ; skip
 00000B3C  FF 0D 000003DE R	        dec life   ; If no skip, then collision happen
 00000B42  66| 83 3D				cmp flagBomb2,7
	   000002AD R 07
 00000B4A  7D 2A				jge resetBombFlag4
 00000B4C  0F B7 1D				movzx ebx ,flagBomb2
	   000002AD R
 00000B53  D1 E3				shl ebx, 1  ;mul by 2
 00000B55  BE 0000029D R			mov esi, OFFSET dropBombPos2
 00000B5A  66| FF 05				inc flagBomb2 
	   000002AD R
 00000B61  66| 8B 04 1E				mov ax,[esi+ebx]
 00000B65  66| A3				mov bombPos2.x, ax 
	   00000297 R
 00000B6B  66| C7 05				mov bombPos2.y, 5  
	   00000299 R
	   0005
						
 00000B74  EB 1B				jmp checkGetAddLife   
						
 00000B76					resetBombFlag4:
 00000B76  66| C7 05					mov flagBomb2,0
	   000002AD R
	   0000
 00000B7F  66| C7 05					mov bombPos2.x,77
	   00000297 R
	   004D
 00000B88  66| C7 05					mov bombPos2.y, 5 
	   00000299 R
	   0005
					
				   
 00000B91			    checkGetAddLife:    
 00000B91  66| 83 3D		        cmp addLifePos.y, ScreenHeight-5 
	   00000267 R 19
 00000B99  0F 8C 00000089	        jl checkEnemyCollision1 
 00000B9F  66| A1				mov ax, airplanePos.x
	   00000038 R
 00000BA5  66| 83 E8 01		        sub ax, 1
 00000BA9  66| 39 05		        cmp addLifePos.x, ax 
	   00000265 R
 00000BB0  7C 76		        jl checkEnemyCollision1 ; skip
 00000BB2  66| A1		        mov ax, airplanePos.x
	   00000038 R
 00000BB8  66| 83 C0 0A		        add ax, 10
 00000BBC  66| 39 05		        cmp addLifePos.x, ax 
	   00000265 R
 00000BC3  7F 63		        jg checkEnemyCollision1 ; skip
 00000BC5  83 3D 000003DE R			cmp life,3
	   03
 00000BCC  7D 5A				jge checkEnemyCollision1 
 00000BCE  FF 05 000003DE R	        inc life    ; If no skip, then collision happen
 00000BD4  66| 83 3D				cmp flag,7
	   0000027B R 07
 00000BDC  7D 2A				jge resetFlag2
 00000BDE  0F B7 1D				movzx ebx ,flag
	   0000027B R
 00000BE5  D1 E3				shl ebx, 1  ;mul by 2
 00000BE7  BE 0000026B R			mov esi, OFFSET dropPos
 00000BEC  66| FF 05				inc flag 
	   0000027B R
 00000BF3  66| 8B 04 1E				mov ax,[esi+ebx]
 00000BF7  66| A3				mov addLifePos.x, ax 
	   00000265 R
 00000BFD  66| C7 05				mov addLifePos.y, 5  
	   00000267 R
	   0005
						
 00000C06  EB 20				jmp checkEnemyCollision1   
						
 00000C08					resetFlag2:
 00000C08  66| C7 05					mov flag,0
	   0000027B R
	   0000
 00000C11  66| 8B 0D					mov cx,dropPos
	   0000026B R
 00000C18  66| 89 0D					mov addLifePos.x, cx
	   00000265 R
 00000C1F  66| C7 05					mov addLifePos.y, 5 
	   00000267 R
	   0005
					
					; Check if airplane is shot
 00000C28			    checkEnemyCollision1:    
 00000C28  80 3D 00000121 R	        cmp enemyActive1, 0 ; If equal, enemy1 already died
	   00
 00000C2F  74 48		        je checkEnemyCollision2
 00000C31  66| 83 3D		       cmp enemyBulletPos1.y, ScreenHeight-5 ; Check1: enemyBullet.y and plane.y
	   00000107 R 19
 00000C39  7C 3E		        jl checkEnemyCollision2 ; Bullet still up in sky, skip
 00000C3B  66| A1		        mov ax, airplanePos.x
	   00000038 R
 00000C41  66| 83 E8 01		        sub ax, 1
 00000C45  66| 39 05		        cmp enemyBulletPos1.x, ax ; Check2: enemyBullet.x is between the range of plane.x
	   00000105 R
 00000C4C  7C 2B		        jl checkEnemyCollision2 ; skip
 00000C4E  66| A1		        mov ax, airplanePos.x
	   00000038 R
 00000C54  66| 83 C0 0A		        add ax, 10
 00000C58  66| 39 05		        cmp enemyBulletPos1.x, ax ; Check3: enemyBullet.x is between the range of plane.x
	   00000105 R
 00000C5F  7F 18		        jg checkEnemyCollision2 ; skip
 00000C61  FF 0D 000003DE R	        dec life    ; If no skip, then collision happen
 00000C67  66| C7 05		        mov enemyBulletPos1.x, 30 ; Reset enemyBullet1 position
	   00000105 R
	   001E
 00000C70  66| C7 05		        mov enemyBulletPos1.y, 5
	   00000107 R
	   0005
				  

 00000C79			    checkEnemyCollision2:
 00000C79  80 3D 00000122 R	    cmp enemyActive2, 0 ; If equal, enemy2 already died
	   00
 00000C80  74 48		        je checkEnemyCollision3
 00000C82  66| 83 3D		        cmp enemyBulletPos2.y, ScreenHeight-5 ; Check1: enemyBullet.y and plane.y
	   0000010F R 19
 00000C8A  7C 3E		        jl checkEnemyCollision3 ; Bullet still up in sky, skip
 00000C8C  66| A1		        mov ax, airplanePos.x
	   00000038 R
 00000C92  66| 83 E8 01		        sub ax, 1
 00000C96  66| 39 05		        cmp enemyBulletPos2.x, ax ; Check2: enemyBullet.x is between the range of plane.x
	   0000010D R
 00000C9D  7C 2B		        jl checkEnemyCollision3 ; skip
 00000C9F  66| A1		        mov ax, airplanePos.x
	   00000038 R
 00000CA5  66| 83 C0 0A		        add ax, 10
 00000CA9  66| 39 05		        cmp enemyBulletPos2.x, ax ; Check3: enemyBullet.x is between the range of plane.x
	   0000010D R
 00000CB0  7F 18		        jg checkEnemyCollision3 ; skip
 00000CB2  FF 0D 000003DE R	        dec life    ; If no skip, then collision happen
 00000CB8  66| C7 05		        mov enemyBulletPos2.x, 50 ; Reset enemyBullet2 position
	   0000010D R
	   0032
 00000CC1  66| C7 05		        mov enemyBulletPos2.y, 5
	   0000010F R
	   0005

 00000CCA			    checkEnemyCollision3:
 00000CCA  80 3D 00000123 R	    cmp enemyActive3, 0 ; If equal, enemy3 already died
	   00
 00000CD1  74 48		        je checkEnemyCollision4
 00000CD3  66| 83 3D		        cmp enemyBulletPos3.y, ScreenHeight-5 ; Check1: enemyBullet.y and plane.y
	   00000117 R 19
 00000CDB  7C 3E		        jl checkEnemyCollision4 ; Bullet still up in sky, skip
 00000CDD  66| A1		        mov ax, airplanePos.x
	   00000038 R
 00000CE3  66| 83 E8 01		        sub ax, 1
 00000CE7  66| 39 05		        cmp enemyBulletPos3.x, ax ; Check2: enemyBullet.x is between the range of plane.x
	   00000115 R
 00000CEE  7C 2B		        jl checkEnemyCollision4 ; skip
 00000CF0  66| A1		        mov ax, airplanePos.x
	   00000038 R
 00000CF6  66| 83 C0 0A		        add ax, 10
 00000CFA  66| 39 05		        cmp enemyBulletPos3.x, ax ; Check3: enemyBullet.x is between the range of plane.x
	   00000115 R
 00000D01  7F 18		        jg checkEnemyCollision4 ; skip
 00000D03  FF 0D 000003DE R	        dec life    ; If no skip, then collision happen
 00000D09  66| C7 05		        mov enemyBulletPos3.x, 80 ; Reset enemyBullet3 position
	   00000115 R
	   0050
 00000D12  66| C7 05		        mov enemyBulletPos3.y, 5
	   00000117 R
	   0005

 00000D1B			    checkEnemyCollision4:
 00000D1B  80 3D 00000124 R	    cmp enemyActive4, 0 ; If equal, enemy4 already died
	   00
 00000D22  74 48		        je endEnemyCollision
 00000D24  66| 83 3D		        cmp enemyBulletPos4.y, ScreenHeight-5 ; Check1: enemyBullet.y and plane.y
	   0000011F R 19
 00000D2C  7C 3E		        jl endEnemyCollision ; Bullet still up in sky, skip
 00000D2E  66| A1		        mov ax, airplanePos.x
	   00000038 R
 00000D34  66| 83 E8 01		        sub ax, 1
 00000D38  66| 39 05		        cmp enemyBulletPos4.x, ax ; Check2: enemyBullet.x is between the range of plane.x
	   0000011D R
 00000D3F  7C 2B		        jl endEnemyCollision ; skip
 00000D41  66| A1		        mov ax, airplanePos.x
	   00000038 R
 00000D47  66| 83 C0 0A		        add ax, 10
 00000D4B  66| 39 05		        cmp enemyBulletPos4.x, ax ; Check3: enemyBullet.x is between the range of plane.x
	   0000011D R
 00000D52  7F 18		        jg endEnemyCollision ; skip
 00000D54  FF 0D 000003DE R	        dec life    ; If no skip, then collision happen
 00000D5A  66| C7 05		        mov enemyBulletPos4.x, 100 ; Reset enemyBullet4 position
	   0000011D R
	   0064
 00000D63  66| C7 05		        mov enemyBulletPos4.y, 5
	   0000011F R
	   0005
 00000D6C			    endEnemyCollision:
				              
				    
    ;Check if enemy1 is shot
 00000D6C			    checkBulletCollision1:
 00000D6C  66| 83 3D		        cmp bulletPos.y, 5 ; If bullet is at the top of the screen, skip
	   0000003E R 05
 00000D74  75 2C		        jne checkBulletCollision2
 00000D76  B9 00000008		        mov ecx,8
 00000D7B  66| A1				mov ax, enemyPos1.x
	   00000101 R
 00000D81					L1:
 00000D81  66| 39 05					cmp bulletPos.x, ax ; Check1: bullet.x and enemy.x
	   0000003C R
 00000D88  74 06					je bulletHitEnemy1 ; skip
 00000D8A  66| 40					inc ax
 00000D8C  E2 F3					loop L1
 00000D8E  EB 12					jmp checkBulletCollision2
 00000D90					bulletHitEnemy1:
 00000D90  C6 05 00000121 R				mov enemyActive1, 0 ; If no skip, then collision happen, enemy2 died
	   00
 00000D97  66| C7 05					mov bulletPos.y, 0 ; Reset bullet position
	   0000003E R
	   0000
 00000DA0  EB 00					jmp checkBulletCollision2

				    ; Check if enemy2 is shot
 00000DA2			    checkBulletCollision2:
 00000DA2  66| 83 3D		        cmp bulletPos.y, 5 ; If bullet is at the top of the screen, skip
	   0000003E R 05
 00000DAA  75 2C		        jne checkBulletCollision3
 00000DAC  B9 00000009				mov ecx,9
 00000DB1  66| A1				mov ax, enemyPos2.x
	   00000109 R
 00000DB7					L2:
 00000DB7  66| 39 05					cmp bulletPos.x, ax ; Check1: bullet.x and enemy.x
	   0000003C R
 00000DBE  74 06					je bulletHitEnemy2 ; skip
 00000DC0  66| 40					inc ax
 00000DC2  E2 F3					loop L2
 00000DC4  EB 12					jmp checkBulletCollision3
 00000DC6					bulletHitEnemy2:
 00000DC6  C6 05 00000122 R				mov enemyActive2, 0 ; If no skip, then collision happen, enemy2 died
	   00
 00000DCD  66| C7 05					mov bulletPos.y, 0 ; Reset bullet position
	   0000003E R
	   0000
 00000DD6  EB 00					jmp checkBulletCollision3

				    ; Check if enemy3 is shot
 00000DD8			    checkBulletCollision3:
 00000DD8  66| 83 3D		        cmp bulletPos.y, 5 ; If bullet is at the top of the screen, skip
	   0000003E R 05
 00000DE0  75 2C		        jne checkBulletCollision4
 00000DE2  B9 00000008		        mov ecx,8
 00000DE7  66| A1				mov ax, enemyPos3.x
	   00000111 R
 00000DED					L3:
 00000DED  66| 39 05					cmp bulletPos.x, ax ; Check1: bullet.x and enemy.x
	   0000003C R
 00000DF4  74 06					je bulletHitEnemy3 ; skip
 00000DF6  66| 40					inc ax
 00000DF8  E2 F3					loop L3
 00000DFA  EB 12					jmp checkBulletCollision4
 00000DFC					bulletHitEnemy3:
 00000DFC  C6 05 00000123 R				mov enemyActive3, 0 ; If no skip, then collision happen, enemy2 died
	   00
 00000E03  66| C7 05					mov bulletPos.y, 0 ; Reset bullet position
	   0000003E R
	   0000
 00000E0C  EB 00					jmp checkBulletCollision4
				     
				    ; Check if enemy4 is shot
 00000E0E			    checkBulletCollision4:
 00000E0E  66| 83 3D		        cmp bulletPos.y, 5 ; If bullet is at the top of the screen, skip
	   0000003E R 05
 00000E16  75 2C		        jne endBulletCollision
 00000E18  B9 00000008		        mov ecx,8
 00000E1D  66| A1				mov ax, enemyPos4.x
	   00000119 R
 00000E23					L4:
 00000E23  66| 39 05					cmp bulletPos.x, ax ; Check1: bullet.x and enemy.x
	   0000003C R
 00000E2A  74 06					je bulletHitEnemy4 ; skip
 00000E2C  66| 40					inc ax
 00000E2E  E2 F3					loop L4
 00000E30  EB 12					jmp endBulletCollision
 00000E32					bulletHitEnemy4:
 00000E32  C6 05 00000124 R				mov enemyActive4, 0 ; If no skip, then collision happen, enemy2 died
	   00
 00000E39  66| C7 05					mov bulletPos.y, 0 ; Reset bullet position
	   0000003E R
	   0000
 00000E42  EB 00					jmp endBulletCollision
 00000E44			    endBulletCollision:

				     ; If lose
 00000E44			    lose:
 00000E44  83 3D 000003DE R	        cmp life, 0
	   00
 00000E4B  0F 85 000000C1	        jne checkWin
				        ;;;TODO DRAW LOSE;;;
 00000E51  E8 00000000 E	        call Clrscr
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR loseDraw1, LENGTHOF loseDraw1, losePos, ADDR count
 00000E73  66| FF 05		        inc losePos.y
	   0000033B R
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR loseDraw2, LENGTHOF loseDraw2, losePos, ADDR count
 00000E97  66| FF 05		        inc losePos.y
	   0000033B R
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR loseDraw3, LENGTHOF loseDraw3, losePos, ADDR count
 00000EBB  66| FF 05		        inc losePos.y
	   0000033B R
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR loseDraw4, LENGTHOF loseDraw4, losePos, ADDR count
 00000EDF  66| FF 05		        inc losePos.y
	   0000033B R
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR loseDraw5, LENGTHOF loseDraw5, losePos, ADDR count
				        INVOKE sleep, 5000
 00000F0D  E9 000000DD		        jmp exitGame


				    ; If win
 00000F12			    checkWin:
 00000F12  A0 00000121 R	        mov al, enemyActive1
 00000F17  0A 05 00000122 R	        or al, enemyActive2
 00000F1D  0A 05 00000123 R	        or al, enemyActive3
 00000F23  0A 05 00000124 R	        or al, enemyActive4
 00000F29  3C 00		        cmp al,0
 00000F2B  0F 85 FFFFF2DF	        jne gameLoop
				   
				        ; Draw "WIN!"
 00000F31  E8 00000000 E	        call Clrscr
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR winDraw1, LENGTHOF winDraw1, winPos, ADDR count
 00000F53  66| FF 05		        inc winPos.y
	   000002B1 R
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR winDraw2, LENGTHOF winDraw2, winPos, ADDR count
 00000F77  66| FF 05		        inc winPos.y
	   000002B1 R
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR winDraw3, LENGTHOF winDraw3, winPos, ADDR count
 00000F9B  66| FF 05		        inc winPos.y
	   000002B1 R
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR winDraw4, LENGTHOF winDraw4, winPos, ADDR count
 00000FBF  66| FF 05		        inc winPos.y
	   000002B1 R
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR winDraw5, LENGTHOF winDraw5, winPos, ADDR count      
				        INVOKE Sleep, 5000
 00000FED  EB 00		        jmp exitGame
				   
 00000FEF			    exitGame:
				        exit

 00000FF6			main ENDP

				END main

Microsoft (R) Macro Assembler Version 14.42.34435.0	    12/22/24 22:58:34
main.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000003F8 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000FF6 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetAsyncKeyState . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleOutputCP . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
start@0  . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000FF6 Public STDCALL
  WaitForStart . . . . . . . . .	L Near	 000001B7 _TEXT	
  face2  . . . . . . . . . . . .	L Near	 000001E6 _TEXT	
  continue . . . . . . . . . . .	L Near	 00000203 _TEXT	
  gameLoop . . . . . . . . . . .	L Near	 00000210 _TEXT	
  DrawBoundaryLeft . . . . . . .	L Near	 00000230 _TEXT	
  DrawBoundaryRight  . . . . . .	L Near	 00000260 _TEXT	
  EndBoundaryDrawing . . . . . .	L Near	 00000290 _TEXT	
  drawlife3  . . . . . . . . . .	L Near	 000002AB _TEXT	
  drawlife2  . . . . . . . . . .	L Near	 000002CA _TEXT	
  drawlife1  . . . . . . . . . .	L Near	 000002E9 _TEXT	
  drawAirplane . . . . . . . . .	L Near	 00000308 _TEXT	
  skipBullet . . . . . . . . . .	L Near	 000003EB _TEXT	
  drawenemy1 . . . . . . . . . .	L Near	 000003EB _TEXT	
  bulletdrop1  . . . . . . . . .	L Near	 000004EF _TEXT	
  drawEnemy2 . . . . . . . . . .	L Near	 000004F6 _TEXT	
  bulletdrop2  . . . . . . . . .	L Near	 000005FA _TEXT	
  drawEnemy3 . . . . . . . . . .	L Near	 00000601 _TEXT	
  bulletdrop3  . . . . . . . . .	L Near	 00000705 _TEXT	
  drawEnemy4 . . . . . . . . . .	L Near	 0000070C _TEXT	
  bulletdrop4  . . . . . . . . .	L Near	 00000810 _TEXT	
  endDrawEnemies . . . . . . . .	L Near	 00000817 _TEXT	
  GenerateLife . . . . . . . . .	L Near	 00000817 _TEXT	
  addingLifeDrop . . . . . . . .	L Near	 0000088F _TEXT	
  resetFlag  . . . . . . . . . .	L Near	 00000898 _TEXT	
  EndGenerateLife  . . . . . . .	L Near	 000008B8 _TEXT	
  BombDraw . . . . . . . . . . .	L Near	 000008B8 _TEXT	
  bombDrop . . . . . . . . . . .	L Near	 00000930 _TEXT	
  resetBombFlag  . . . . . . . .	L Near	 00000939 _TEXT	
  EndBomb  . . . . . . . . . . .	L Near	 00000956 _TEXT	
  BombDraw2  . . . . . . . . . .	L Near	 00000956 _TEXT	
  bombDrop2  . . . . . . . . . .	L Near	 000009CE _TEXT	
  resetBombFlag2 . . . . . . . .	L Near	 000009D7 _TEXT	
  EndBomb2 . . . . . . . . . . .	L Near	 000009F4 _TEXT	
  checkRight . . . . . . . . . .	L Near	 00000A15 _TEXT	
  checkShoot . . . . . . . . . .	L Near	 00000A36 _TEXT	
  updateBullet . . . . . . . . .	L Near	 00000A6E _TEXT	
  endUpdate  . . . . . . . . . .	L Near	 00000A7F _TEXT	
  checkGetBomb . . . . . . . . .	L Near	 00000A86 _TEXT	
  resetBombFlag3 . . . . . . . .	L Near	 00000AF1 _TEXT	
  checkGetBomb2  . . . . . . . .	L Near	 00000B0C _TEXT	
  resetBombFlag4 . . . . . . . .	L Near	 00000B76 _TEXT	
  checkGetAddLife  . . . . . . .	L Near	 00000B91 _TEXT	
  resetFlag2 . . . . . . . . . .	L Near	 00000C08 _TEXT	
  checkEnemyCollision1 . . . . .	L Near	 00000C28 _TEXT	
  checkEnemyCollision2 . . . . .	L Near	 00000C79 _TEXT	
  checkEnemyCollision3 . . . . .	L Near	 00000CCA _TEXT	
  checkEnemyCollision4 . . . . .	L Near	 00000D1B _TEXT	
  endEnemyCollision  . . . . . .	L Near	 00000D6C _TEXT	
  checkBulletCollision1  . . . .	L Near	 00000D6C _TEXT	
  L1 . . . . . . . . . . . . . .	L Near	 00000D81 _TEXT	
  bulletHitEnemy1  . . . . . . .	L Near	 00000D90 _TEXT	
  checkBulletCollision2  . . . .	L Near	 00000DA2 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 00000DB7 _TEXT	
  bulletHitEnemy2  . . . . . . .	L Near	 00000DC6 _TEXT	
  checkBulletCollision3  . . . .	L Near	 00000DD8 _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 00000DED _TEXT	
  bulletHitEnemy3  . . . . . . .	L Near	 00000DFC _TEXT	
  checkBulletCollision4  . . . .	L Near	 00000E0E _TEXT	
  L4 . . . . . . . . . . . . . .	L Near	 00000E23 _TEXT	
  bulletHitEnemy4  . . . . . . .	L Near	 00000E32 _TEXT	
  endBulletCollision . . . . . .	L Near	 00000E44 _TEXT	
  lose . . . . . . . . . . . . .	L Near	 00000E44 _TEXT	
  checkWin . . . . . . . . . . .	L Near	 00000F12 _TEXT	
  exitGame . . . . . . . . . . .	L Near	 00000FEF _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MarginSize . . . . . . . . . . .	Number	 0000000Fh   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
ScreenHeight . . . . . . . . . .	Number	 0000001Eh   
ScreenWidth  . . . . . . . . . .	Number	 00000082h   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
addLifeColor . . . . . . . . . .	Word	 00000269 _DATA	
addLifePos . . . . . . . . . . .	COORD	 00000265 _DATA	
addLife  . . . . . . . . . . . .	Byte	 00000264 _DATA	
airplaneDraw1  . . . . . . . . .	Byte	 00000000 _DATA	
airplaneDraw2  . . . . . . . . .	Byte	 00000008 _DATA	
airplaneDraw3  . . . . . . . . .	Byte	 00000013 _DATA	
airplaneDraw4  . . . . . . . . .	Byte	 00000020 _DATA	
airplaneDraw5  . . . . . . . . .	Byte	 00000029 _DATA	
airplanePos  . . . . . . . . . .	COORD	 00000038 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
bomb2  . . . . . . . . . . . . .	Byte	 00000296 _DATA	
bombColor2 . . . . . . . . . . .	Word	 0000029B _DATA	
bombColor  . . . . . . . . . . .	Word	 00000282 _DATA	
bombPos2 . . . . . . . . . . . .	COORD	 00000297 _DATA	
bombPos  . . . . . . . . . . . .	COORD	 0000027E _DATA	
bomb . . . . . . . . . . . . . .	Byte	 0000027D _DATA	
boundaryDrawn  . . . . . . . . .	Byte	 00000263 _DATA	
boundaryPosLeft  . . . . . . . .	COORD	 0000025B _DATA	
boundaryPosRight . . . . . . . .	COORD	 0000025F _DATA	
boundary . . . . . . . . . . . .	Byte	 00000259 _DATA	
brown  . . . . . . . . . . . . .	Number	 00000006h   
bulletPos  . . . . . . . . . . .	COORD	 0000003C _DATA	
bullet . . . . . . . . . . . . .	Byte	 00000033 _DATA	
bytesWritten . . . . . . . . . .	DWord	 000003D2 _DATA	
count  . . . . . . . . . . . . .	DWord	 000003DA _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
dropBombPos2 . . . . . . . . . .	Word	 0000029D _DATA	
dropBombPos  . . . . . . . . . .	Word	 00000284 _DATA	
dropPos  . . . . . . . . . . . .	Word	 0000026B _DATA	
enemyActive1 . . . . . . . . . .	Byte	 00000121 _DATA	
enemyActive2 . . . . . . . . . .	Byte	 00000122 _DATA	
enemyActive3 . . . . . . . . . .	Byte	 00000123 _DATA	
enemyActive4 . . . . . . . . . .	Byte	 00000124 _DATA	
enemyBullet1 . . . . . . . . . .	Byte	 000000FD _DATA	
enemyBullet2 . . . . . . . . . .	Byte	 000000FE _DATA	
enemyBullet3 . . . . . . . . . .	Byte	 000000FF _DATA	
enemyBullet4 . . . . . . . . . .	Byte	 00000100 _DATA	
enemyBulletPos1  . . . . . . . .	COORD	 00000105 _DATA	
enemyBulletPos2  . . . . . . . .	COORD	 0000010D _DATA	
enemyBulletPos3  . . . . . . . .	COORD	 00000115 _DATA	
enemyBulletPos4  . . . . . . . .	COORD	 0000011D _DATA	
enemyPos1  . . . . . . . . . . .	COORD	 00000101 _DATA	
enemyPos2  . . . . . . . . . . .	COORD	 00000109 _DATA	
enemyPos3  . . . . . . . . . . .	COORD	 00000111 _DATA	
enemyPos4  . . . . . . . . . . .	COORD	 00000119 _DATA	
enemyShape1draw1 . . . . . . . .	Byte	 00000040 _DATA	
enemyShape1draw2 . . . . . . . .	Byte	 00000048 _DATA	
enemyShape1draw3 . . . . . . . .	Byte	 00000051 _DATA	
enemyShape1draw4 . . . . . . . .	Byte	 0000005A _DATA	
enemyShape1draw5 . . . . . . . .	Byte	 00000063 _DATA	
enemyShape2draw1 . . . . . . . .	Byte	 0000006C _DATA	
enemyShape2draw2 . . . . . . . .	Byte	 00000074 _DATA	
enemyShape2draw3 . . . . . . . .	Byte	 0000007E _DATA	
enemyShape2draw4 . . . . . . . .	Byte	 00000088 _DATA	
enemyShape2draw5 . . . . . . . .	Byte	 00000092 _DATA	
enemyShape3draw1 . . . . . . . .	Byte	 0000009A _DATA	
enemyShape3draw2 . . . . . . . .	Byte	 000000A4 _DATA	
enemyShape3draw3 . . . . . . . .	Byte	 000000AE _DATA	
enemyShape3draw4 . . . . . . . .	Byte	 000000B9 _DATA	
enemyShape3draw5 . . . . . . . .	Byte	 000000C3 _DATA	
enemyShape4draw1 . . . . . . . .	Byte	 000000CC _DATA	
enemyShape4draw2 . . . . . . . .	Byte	 000000D5 _DATA	
enemyShape4draw3 . . . . . . . .	Byte	 000000DF _DATA	
enemyShape4draw4 . . . . . . . .	Byte	 000000E9 _DATA	
enemyShape4draw5 . . . . . . . .	Byte	 000000F3 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
flagBomb2  . . . . . . . . . . .	Word	 000002AD _DATA	
flagBomb . . . . . . . . . . . .	Word	 00000294 _DATA	
flag . . . . . . . . . . . . . .	Word	 0000027B _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
initialAirplanePos . . . . . . .	COORD	 00000034 _DATA	
lifePos  . . . . . . . . . . . .	COORD	 000003F4 _DATA	
lifeSymbol1  . . . . . . . . . .	Byte	 000003E2 _DATA	
lifeSymbol2  . . . . . . . . . .	Byte	 000003E7 _DATA	
lifeSymbol3  . . . . . . . . . .	Byte	 000003ED _DATA	
life . . . . . . . . . . . . . .	DWord	 000003DE _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
loseDraw1  . . . . . . . . . . .	Byte	 0000033D _DATA	
loseDraw2  . . . . . . . . . . .	Byte	 0000035A _DATA	
loseDraw3  . . . . . . . . . . .	Byte	 00000377 _DATA	
loseDraw4  . . . . . . . . . . .	Byte	 00000394 _DATA	
loseDraw5  . . . . . . . . . . .	Byte	 000003B1 _DATA	
losePos  . . . . . . . . . . . .	COORD	 00000339 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
main . . . . . . . . . . . . . .	Text   	 start@0
outputHandle . . . . . . . . . .	DWord	 000003CE _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
screenBuffer . . . . . . . . . .	COORD	 000003D6 _DATA	
startEnemy1  . . . . . . . . . .	Byte	 00000157 _DATA	
startEnemy2  . . . . . . . . . .	Byte	 0000016B _DATA	
startEnemy3  . . . . . . . . . .	Byte	 00000188 _DATA	
startEnemy4  . . . . . . . . . .	Byte	 000001AA _DATA	
startEnemy6  . . . . . . . . . .	Byte	 000001E9 _DATA	
startEnemy7  . . . . . . . . . .	Byte	 00000206 _DATA	
startEnemy8  . . . . . . . . . .	Byte	 00000221 _DATA	
startEnemyPos  . . . . . . . . .	COORD	 0000014F _DATA	
startEnemyface1  . . . . . . . .	Byte	 000001CA _DATA	
startEnemyface2  . . . . . . . .	Byte	 0000023A _DATA	
startEnemyfacePos  . . . . . . .	COORD	 00000153 _DATA	
startMessage1  . . . . . . . . .	Byte	 00000129 _DATA	
startMessage2  . . . . . . . . .	Byte	 0000013C _DATA	
startPos . . . . . . . . . . . .	COORD	 00000125 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
winDraw1 . . . . . . . . . . . .	Byte	 000002B3 _DATA	
winDraw2 . . . . . . . . . . . .	Byte	 000002CD _DATA	
winDraw3 . . . . . . . . . . . .	Byte	 000002E8 _DATA	
winDraw4 . . . . . . . . . . . .	Byte	 00000303 _DATA	
winDraw5 . . . . . . . . . . . .	Byte	 0000031E _DATA	
winPos . . . . . . . . . . . . .	COORD	 000002AF _DATA	
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
