<<<<<<< Updated upstream
Microsoft (R) Macro Assembler Version 14.42.34435.0	    12/21/24 23:04:12
=======
Microsoft (R) Macro Assembler Version 14.42.34435.0	    12/21/24 22:51:49
>>>>>>> Stashed changes
main.asm						     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data
				; Define BoxSize
 = 0000000F			MarginSize = 15 ; Margin size
 = 00000082			ScreenWidth = 130
 = 0000001E			ScreenHeight = 30

				; Define airplane
 00000000 20 20 20 20 20	airplaneDraw1 BYTE ' ', ' ', ' ', ' ', ' ', '/', 5ch, 0
	   2F 5C 00
 00000008 20 20 5F 5F 2F	airplaneDraw2 BYTE ' ', ' ', '_', '_', '/', ' ', ' ', 5ch, '_', '_', 0
	   20 20 5C 5F 5F
	   00
 00000013 2F 5F 5F 5F 5F	airplaneDraw3 BYTE '/', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_', 5ch, 0
	   5F 5F 5F 5F 5F
	   5F 5C 00
 00000020 20 20 20 20 7C	airplaneDraw4 BYTE  ' ',' ',' ', ' ', '|', ' ', ' ', '|', 0
	   20 20 7C 00
 00000029 20 20 20 2F 5F	airplaneDraw5 BYTE  ' ',' ', ' ', '/', '_', '|', '|', '_', 5ch, 0
	   7C 7C 5F 5C 00
 00000033 2A			bullet BYTE '*'
 00000034 0041 001C		initialAirplanePos COORD <ScreenWidth / 2, ScreenHeight - 2>
 00000038 0041 001C		airplanePos COORD <ScreenWidth / 2, ScreenHeight - 2>
 0000003C 0000 0000		bulletPos COORD <0, 0>

				; Define enemies
 00000040 20 5F 5F 5F 5F	enemyShape1draw1 BYTE ' ______', 0
	   5F 5F 00
 00000048 7C 20 4F 20 20	enemyShape1draw2 BYTE '| O  O |', 0
	   4F 20 7C 00
 00000051 7C 20 20 3C 3E	enemyShape1draw3 BYTE '|  <>  |', 0
	   20 20 7C 00
 0000005A 7C 20 20 5C 2F	enemyShape1draw4 BYTE '|  \/  |', 0
	   20 20 7C 00
 00000063 7C 5F 5F 5F 5F	enemyShape1draw5 BYTE '|______|', 0
	   5F 5F 7C 00

 0000006C 20 20 5F 5F 5F	enemyShape2draw1 BYTE '  _____', 0
	   5F 5F 00
 00000074 20 2F 20 20 20	enemyShape2draw2 BYTE ' /     \ ', 0
	   20 20 5C 20 00
 0000007E 7C 20 20 20 20	enemyShape2draw3 BYTE '|       |', 0
	   20 20 20 7C 00
 00000088 20 5C 5F 5F 5F	enemyShape2draw4 BYTE ' \_____/ ', 0
	   5F 5F 2F 20 00
 00000092 20 20 28 20 20	enemyShape2draw5 BYTE '  (   )', 0
	   20 29 00

 0000009A 20 20 20 28 20	enemyShape3draw1 BYTE '   ( )   ', 0
	   29 20 20 20 00
 000000A4 20 2F 20 20 20	enemyShape3draw2 BYTE ' /     \ ', 0
	   20 20 5C 20 00
 000000AE 7C 20 20 20 2A	enemyShape3draw3 BYTE '|   *   | ', 0
	   20 20 20 7C 20
	   00
 000000B9 20 5C 20 20 20	enemyShape3draw4 BYTE ' \     / ', 0
	   20 20 2F 20 00
 000000C3 20 20 5C 5F 5F	enemyShape3draw5 BYTE '  \___/ ' , 0
	   5F 2F 20 00


 000000CC 20 5F 5F 5F 5F	enemyShape4draw1 BYTE ' _______', 0
	   5F 5F 5F 00
 000000D5 7C 20 20 4F 20	enemyShape4draw2 BYTE '|  O O  |', 0
	   4F 20 20 7C 00
 000000DF 7C 20 20 20 5E	enemyShape4draw3 BYTE '|   ^   |', 0
	   20 20 20 7C 00
 000000E9 7C 20 20 5C 5F	enemyShape4draw4 BYTE '|  \_/  |', 0
	   2F 20 20 7C 00
 000000F3 20 5C 5F 5F 5F	enemyShape4draw5 BYTE ' \_____/ ', 0
	   5F 5F 2F 20 00


 000000FD 6F			enemyBullet1 BYTE 'o'
 000000FE 6F			enemyBullet2 BYTE 'o'
 000000FF 6F			enemyBullet3 BYTE 'o'
 00000100 6F			enemyBullet4 BYTE 'o'

				; Define enemy positions and bullets
 00000101 001A 0005		enemyPos1 COORD <26, 5>
 00000105 001E 0005		enemyBulletPos1 COORD <30, 5>
 00000109 002E 0005		enemyPos2 COORD <46, 5>
 0000010D 0032 0005		enemyBulletPos2 COORD <50, 5>
 00000111 0056 0005		enemyPos3 COORD <86, 5>
 00000115 005A 0005		enemyBulletPos3 COORD <90, 5>
 00000119 006A 0005		enemyPos4 COORD <106, 5>
 0000011D 006E 0005		enemyBulletPos4 COORD <110, 5>
 00000121 01			enemyActive1 BYTE 1
 00000122 01			enemyActive2 BYTE 1
 00000123 01			enemyActive3 BYTE 1
 00000124 01			enemyActive4 BYTE 1

				;Define "PRESS TO START"
 00000125 0032 0014		startPos COORD <50,20>
 00000129 2B 2D 2D 2D 2D	startMessage1 BYTE '+','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','+',0  ; Start message with '+' and '-'
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2B 00
 0000013C 7C 20 50 52 45	startMessage2 BYTE '|',' ','P','R','E','S','S',' ','T','O',' ','S','T','A','R','T',' ','|',0  ; Press to start message
	   53 53 20 54 4F
	   20 53 54 41 52
	   54 20 7C 00

				;Define enemy for start scene
 0000014F 002A 000C		startEnemyPos COORD <42,12>
 00000153 002A 0009		startEnemyfacePos COORD <42,9>
 00000157 20 20 20 20 20	startEnemy1 BYTE ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','@',' ',' ',' ',' ',' ',' ','@',0
	   20 20 20 20 20
	   20 20 20 40 20
	   20 20 20 20 20
	   40 00
 0000016D 20 20 20 20 2F	startEnemy2 BYTE ' ',' ',' ',' ','/',' ','\',' ',' ',' ',' ',' ','{',' ','_','_','_','_','_','}',' ',' ',' ',' ',' ',' ','/',' ','\',0    
	   20 5C 20 20 20
	   20 20 7B 20 5F
	   5F 5F 5F 5F 7D
	   20 20 20 20 20
	   20 2F 20 5C 00
 0000018B 20 20 2F 20 20	startEnemy3 BYTE ' ',' ','/',' ',' ','|',' ',' ','\','_','_','_','/','*','*','*','*','*','*','*','\','_','_','_','/',' ',' ','|',' ',' ','\',0   
	   7C 20 20 5C 5F
	   5F 5F 2F 2A 2A
	   2A 2A 2A 2A 2A
	   5C 5F 5F 5F 2F
	   20 20 7C 20 20
	   5C 00
 000001AB 20 28 20 20 20	startEnemy4 BYTE ' ','(',' ',' ',' ','I',' ',' ','/',' ',' ',' ','-',' ',' ',' ',' ',' ',' ',' ','-',' ',' ',' ','\',' ',' ','I',' ',' ',' ',')',0  
	   49 20 20 2F 20
	   20 20 2D 20 20
	   20 20 20 20 20
	   2D 20 20 20 5C
	   20 20 49 20 20
	   20 29 00
 000001CC 20 20 5C 20 20	startEnemyface1 BYTE ' ',' ','\',' ',' ','|',' ',' ','|',' ',' ',' ','0',' ',' ',' ',' ',' ',' ',' ','0',' ',' ',' ','|',' ',' ','|',' ',' ','/',0  
	   7C 20 20 7C 20
	   20 20 30 20 20
	   20 20 20 20 20
	   30 20 20 20 7C
	   20 20 7C 20 20
	   2F 00
 000001EC 20 20 20 20 5C	startEnemy6 BYTE ' ',' ',' ',' ','\',' ',' ',' ','|',' ',' ',' ',' ',' ',' ',' ','A',' ',' ',' ',' ',' ',' ',' ','|',' ',' ',' ','/',0     
	   20 20 20 7C 20
	   20 20 20 20 20
	   20 41 20 20 20
	   20 20 20 20 7C
	   20 20 20 2F 00
 0000020A 20 20 20 20 20	startEnemy7 BYTE ' ',' ',' ',' ',' ',' ','\','_','_',' ',' ',' ',' ','_','_','_','_','_','_','_',' ',' ',' ',' ','_','_','/',0       
	   20 5C 5F 5F 20
	   20 20 20 5F 5F
	   5F 5F 5F 5F 5F
	   20 20 20 20 5F
	   5F 2F 00
 00000226 20 20 20 20 20	startEnemy8 BYTE ' ',' ',' ',' ',' ',' ',' ',' ',' ','\','_','_','_','_','_','_','_','_','_','_','_','_','_','/',0    
	   20 20 20 20 5C
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 2F 00
 0000023F 20 20 5C 20 20	startEnemyface2 BYTE ' ',' ','\',' ',' ','|',' ',' ','|',' ',' ',' ','>',' ',' ',' ',' ',' ',' ',' ','<',' ',' ',' ','|',' ',' ','|',' ',' ','/',0  
	   7C 20 20 7C 20
	   20 20 3E 20 20
	   20 20 20 20 20
	   3C 20 20 20 7C
	   20 20 7C 20 20
	   2F 00

				; Define "WIN!" 
 0000025F 0037 000F		winPos COORD <55,15>
 00000263 5F 5F 20 20 20	winDraw1 BYTE '_','_',' ',' ',' ',' ',' ',' ',' ',' ','_','_','_','_','_',' ','_',' ',' ',' ','_',' ',' ',' ','_',0 
	   20 20 20 20 20
	   5F 5F 5F 5F 5F
	   20 5F 20 20 20
	   5F 20 20 20 5F
	   00
 0000027D 5C 20 5C 20 20	winDraw2 BYTE 5ch,' ',5ch,' ',' ',' ',' ',' ',' ','/',' ','/','_',' ','_',7ch,' ',5ch,' ',7ch,' ',7ch,' ',7ch,' ',7ch,0
	   20 20 20 20 2F
	   20 2F 5F 20 5F
	   7C 20 5C 20 7C
	   20 7C 20 7C 20
	   7C 00
 00000298 20 5C 20 5C 20	winDraw3 BYTE ' ',5ch,' ',5ch,' ','/',5ch,' ','/',' ','/',' ',7ch,' ',7ch,7ch,' ',' ',5ch,7ch,' ',7ch,' ',7ch,' ',7ch,0
	   2F 5C 20 2F 20
	   2F 20 7C 20 7C
	   7C 20 20 5C 7C
	   20 7C 20 7C 20
	   7C 00
 000002B3 20 20 5C 20 56	winDraw4 BYTE ' ',' ',5ch,' ','V',' ',' ','V',' ','/',' ',' ',7ch,' ',7ch,7ch,' ',7ch,5ch,' ',' ',7ch,' ',7ch,'_',7ch,0
	   20 20 56 20 2F
	   20 20 7C 20 7C
	   7C 20 7C 5C 20
	   20 7C 20 7C 5F
	   7C 00
 000002CE 20 20 20 5C 5F	winDraw5 BYTE ' ',' ',' ',5ch,'_','/',5ch,'_','/',' ',' ',7ch,'_','_','_',7ch,'_',7ch,' ',5ch,'_',7ch,' ','(','_',')',0
	   2F 5C 5F 2F 20
	   20 7C 5F 5F 5F
	   7C 5F 7C 20 5C
	   5F 7C 20 28 5F
	   29 00
 000001AF 50 4C 41 59 20	playAgainPrompt BYTE 'PLAY AGAIN? (Y/N): ', 0
	   41 47 41 49 4E
	   3F 20 28 59 2F
	   4E 29 3A 20 00

				; Define "LOSE"
<<<<<<< Updated upstream
 000002E9 0037 000F		losePos COORD <55,15>
 000002ED 20 5F 20 20 20	loseDraw1 BYTE ' ','_',' ',' ',' ',' ',' ','_','_','_',' ',' ','_','_','_','_',' ',' ','_','_','_','_','_',' ',' ',' ','_',' ',0
=======
 000001C3 0037 000F		losePos COORD <55,15>
 000001C7 20 5F 20 20 20	loseDraw1 BYTE ' ','_',' ',' ',' ',' ',' ','_','_','_',' ',' ','_','_','_','_',' ',' ','_','_','_','_','_',' ',' ',' ','_',' ',0
>>>>>>> Stashed changes
	   20 20 5F 5F 5F
	   20 20 5F 5F 5F
	   5F 20 20 5F 5F
	   5F 5F 5F 20 20
	   20 5F 20 00
<<<<<<< Updated upstream
 0000030A 7C 20 7C 20 20	loseDraw2 BYTE '|',' ',7ch,' ',' ',' ','/',' ','_',' ',5ch,'/',' ','_','_','_',7ch,7ch,' ','_','_','_','_',7ch,' ',7ch,' ',7ch,0
=======
 000001E4 7C 20 7C 20 20	loseDraw2 BYTE '|',' ',7ch,' ',' ',' ','/',' ','_',' ',5ch,'/',' ','_','_','_',7ch,7ch,' ','_','_','_','_',7ch,' ',7ch,' ',7ch,0
>>>>>>> Stashed changes
	   20 2F 20 5F 20
	   5C 2F 20 5F 5F
	   5F 7C 7C 20 5F
	   5F 5F 5F 7C 20
	   7C 20 7C 00
<<<<<<< Updated upstream
 00000327 7C 20 7C 20 20	loseDraw3 BYTE '|',' ',7ch,' ',' ',7ch,' ',7ch,' ',7ch,' ',5ch,'_','_','_',' ',5ch,7ch,' ',' ','_',7ch,' ',' ',' ',7ch,' ',7ch,0
=======
 00000201 7C 20 7C 20 20	loseDraw3 BYTE '|',' ',7ch,' ',' ',7ch,' ',7ch,' ',7ch,' ',5ch,'_','_','_',' ',5ch,7ch,' ',' ','_',7ch,' ',' ',' ',7ch,' ',7ch,0
>>>>>>> Stashed changes
	   7C 20 7C 20 7C
	   20 5C 5F 5F 5F
	   20 5C 7C 20 20
	   5F 7C 20 20 20
	   7C 20 7C 00
<<<<<<< Updated upstream
 00000344 7C 20 7C 5F 5F	loseDraw4 BYTE '|',' ',7ch,'_','_',7ch,' ',7ch,'_',7ch,' ',7ch,'_','_','_',')',' ',7ch,' ',7ch,'_','_','_',' ',' ',7ch,'_',7ch,0
=======
 0000021E 7C 20 7C 5F 5F	loseDraw4 BYTE '|',' ',7ch,'_','_',7ch,' ',7ch,'_',7ch,' ',7ch,'_','_','_',')',' ',7ch,' ',7ch,'_','_','_',' ',' ',7ch,'_',7ch,0
>>>>>>> Stashed changes
	   7C 20 7C 5F 7C
	   20 7C 5F 5F 5F
	   29 20 7C 20 7C
	   5F 5F 5F 20 20
	   7C 5F 7C 00
<<<<<<< Updated upstream
 00000361 7C 5F 5F 5F 5F	loseDraw5 BYTE '|','_','_','_','_','_',5ch,'_','_','_','/',7ch,'_','_','_','_','/',7ch,'_','_','_','_','_',7ch,' ','(','_',')',0
=======
 0000023B 7C 5F 5F 5F 5F	loseDraw5 BYTE '|','_','_','_','_','_',5ch,'_','_','_','/',7ch,'_','_','_','_','/',7ch,'_','_','_','_','_',7ch,' ','(','_',')',0
>>>>>>> Stashed changes
	   5F 5C 5F 5F 5F
	   2F 7C 5F 5F 5F
	   5F 2F 7C 5F 5F
	   5F 5F 5F 7C 20
	   28 5F 29 00
				playAgainPrompt BYTE 'PLAY AGAIN? (Y/N): ', 0
main.asm(82) : error A2005:symbol redefinition : playAgainPrompt


				; Define others
<<<<<<< Updated upstream
 0000037E 00000000		outputHandle DWORD 0
 00000382 00000000		bytesWritten DWORD 0
 00000386 0082 001E		screenBuffer COORD <130,30>
 0000038A 00000000		count DWORD 0

				; Define lives
 0000038E 00000003		life DWORD 3
 00000392 48 50 3A 03 00	lifeSymbol1 BYTE 'H','P',':',03h,0
 00000397 48 50 3A 03 03	lifeSymbol2 BYTE 'H','P',':',03h, 03h, 0
	   00
 0000039D 48 50 3A 03 03	lifeSymbol3 BYTE 'H','P',':',03h, 03h, 03h, 0
	   03 00
 000003A4 0005 0003		lifePos COORD <5, 3>
=======
 00000258 00000000		outputHandle DWORD 0
 0000025C 00000000		bytesWritten DWORD 0
 00000260 0082 001E		screenBuffer COORD <130,30>
 00000264 00000000		count DWORD 0

				; Define lives
 00000268 00000003		life DWORD 3
 0000026C 48 50 3A 03 00	lifeSymbol1 BYTE 'H','P',':',03h,0
 00000271 48 50 3A 03 03	lifeSymbol2 BYTE 'H','P',':',03h, 03h, 0
	   00
 00000277 48 50 3A 03 03	lifeSymbol3 BYTE 'H','P',':',03h, 03h, 03h, 0
	   03 00
 0000027E 0005 0003		lifePos COORD <5, 3>
>>>>>>> Stashed changes

 00000000			.code
				SetConsoleOutputCP PROTO STDCALL :DWORD
				GetAsyncKeyState PROTO STDCALL :DWORD

 00000000			main PROC
				    ; Initialize console
				    INVOKE SetConsoleOutputCP, 65001 ; Set console output to UTF-8
				    INVOKE GetStdHandle, STD_OUTPUT_HANDLE
<<<<<<< Updated upstream
 00000011  A3 0000037E R	    mov outputHandle, eax
=======
 00000011  A3 00000258 R	    mov outputHandle, eax
>>>>>>> Stashed changes
 00000016  E8 00000000 E	    call Clrscr

				    ; Draw Start Message
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR startMessage1, LENGTHOF startMessage1, startPos, ADDR count
 00000038  66| FF 0D				dec startPos.y
	   00000127 R
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR startMessage2, LENGTHOF startMessage2, startPos, ADDR count
 0000005C  66| FF 0D				dec startPos.y
	   00000127 R
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR startMessage1, LENGTHOF startMessage1, startPos, ADDR count
 00000080  66| FF 0D				dec startPos.y
	   00000127 R
 00000087  66| 83 05				add startPos.y, 3
	   00000127 R 03

				    ;Draw enemypic
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR startEnemy8, LENGTHOF startEnemy8, startEnemyPos, ADDR count
 000000AC  66| FF 0D				dec startEnemyPos.y
	   00000151 R
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR startEnemy7, LENGTHOF startEnemy7, startEnemyPos, ADDR count
 000000D0  66| FF 0D				dec startEnemyPos.y
	   00000151 R
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR startEnemy6, LENGTHOF startEnemy6, startEnemyPos, ADDR count
 000000F4  66| FF 0D				dec startEnemyPos.y
	   00000151 R
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR startEnemyface1, LENGTHOF startEnemyface1, startEnemyPos, ADDR count
 00000118  66| FF 0D				dec startEnemyPos.y
	   00000151 R
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR startEnemy4, LENGTHOF startEnemy4, startEnemyPos, ADDR count
 0000013C  66| FF 0D				dec startEnemyPos.y
	   00000151 R
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR startEnemy3, LENGTHOF startEnemy3, startEnemyPos, ADDR count
 00000160  66| FF 0D				dec startEnemyPos.y
	   00000151 R
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR startEnemy2, LENGTHOF startEnemy2, startEnemyPos, ADDR count
 00000184  66| FF 0D				dec startEnemyPos.y
	   00000151 R
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR startEnemy1, LENGTHOF startEnemy1, startEnemyPos, ADDR count
 000001A8  66| FF 0D		        dec startEnemyPos.y
	   00000151 R
 000001AF  66| 83 05				add startEnemyPos.y, 8
	   00000151 R 08


 000001B7			    WaitForStart:
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR startEnemyface2, LENGTHOF startEnemyface2, startEnemyfacePos, ADDR count

				        ; Wait for player to press a key to start
				        INVOKE GetAsyncKeyState, VK_SPACE ; Check if any key is pressed 
 000001DB  66| A9 8000		        test ax, 8000h              ; Test if the high bit is set (meaning key is pressed)
 000001DF  74 D6		        jz WaitForStart


				    ; Main game loop
 000001E1			    gameLoop:
				        ; Clear screen
 000001E1  E8 00000000 E	        call Clrscr



				        ; Draw life
<<<<<<< Updated upstream
 000001E6  83 3D 0000038E R	        cmp life, 3
	   03
 000001ED  74 12		        je drawlife3
 000001EF  83 3D 0000038E R	        cmp life, 2
	   02
 000001F6  74 28		        je drawlife2
 000001F8  83 3D 0000038E R	        cmp life, 1
=======
 00000020  83 3D 00000268 R	        cmp life, 3
	   03
 00000027  74 12		        je drawlife3
 00000029  83 3D 00000268 R	        cmp life, 2
	   02
 00000030  74 28		        je drawlife2
 00000032  83 3D 00000268 R	        cmp life, 1
>>>>>>> Stashed changes
	   01
 000001FF  74 3E		        je drawlife1

				    ; Draw life
 00000201			    drawlife3:
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR lifeSymbol3, 6, lifePos, ADDR count
 0000021E  EB 3E		        jmp drawAirplane
 00000220			    drawlife2:
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR lifeSymbol2, 5, lifePos, ADDR count
 0000023D  EB 1F		        jmp drawAirplane
 0000023F			    drawlife1:
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR lifeSymbol1, 4, lifePos, ADDR count
 0000025C  EB 00		        jmp drawAirplane

				    ; Draw airplane
 0000025E			    drawAirplane:
				        INVOKE WriteConsoleOutputCharacter,
				               outputHandle, ADDR airplaneDraw5, LENGTHOF airplaneDraw5, airplanePos, ADDR count
 0000027B  66| FF 0D		        dec airplanePos.y
	   0000003A R
				        INVOKE WriteConsoleOutputCharacter,
				               outputHandle, ADDR airplaneDraw4, LENGTHOF airplaneDraw4, airplanePos, ADDR count
 0000029F  66| FF 0D		        dec airplanePos.y
	   0000003A R
				        INVOKE WriteConsoleOutputCharacter,
				               outputHandle, ADDR airplaneDraw3, LENGTHOF airplaneDraw3, airplanePos, ADDR count
 000002C3  66| FF 0D		        dec airplanePos.y
	   0000003A R
				        INVOKE WriteConsoleOutputCharacter,
				               outputHandle, ADDR airplaneDraw2, LENGTHOF airplaneDraw2, airplanePos, ADDR count
 000002E7  66| FF 0D		        dec airplanePos.y
	   0000003A R
				        INVOKE WriteConsoleOutputCharacter,
				               outputHandle, ADDR airplaneDraw1, LENGTHOF airplaneDraw1, airplanePos, ADDR count
 0000030B  66| FF 0D		        dec airplanePos.y
	   0000003A R
 00000312  66| 83 05		        add airplanePos.y, 5 ; Add back 5 to airplanePos.y
	   0000003A R 05

				        ; Draw my bullet if active
 0000031A  66| 83 3D		        cmp bulletPos.y, 0
	   0000003E R 00
 00000322  74 1D		        je skipBullet
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR bullet, 1, bulletPos, ADDR count
 00000341			    skipBullet:

				        ; Draw enemies and their bullets
 00000341			    drawenemy1:
 00000341  80 3D 00000121 R	        cmp enemyActive1, 0 ; Check if enemy is active 
	   00
 00000348  0F 84 000000FE	        je drawEnemy2
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape1draw5, LENGTHOF enemyShape1draw5, enemyPos1, ADDR count
 0000036B  66| FF 0D				dec enemyPos1.y
	   00000103 R
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape1draw4, LENGTHOF enemyShape1draw4, enemyPos1, ADDR count
 0000038F  66| FF 0D				dec enemyPos1.y
	   00000103 R
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape1draw3, LENGTHOF enemyShape1draw3, enemyPos1, ADDR count
 000003B3  66| FF 0D				dec enemyPos1.y
	   00000103 R
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape1draw2, LENGTHOF enemyShape1draw3, enemyPos1, ADDR count
 000003D7  66| FF 0D				dec enemyPos1.y
	   00000103 R
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape1draw1, LENGTHOF enemyShape1draw1, enemyPos1, ADDR count
 000003FB  66| FF 0D				dec enemyPos1.y
	   00000103 R
 00000402  66| 83 05				add enemyPos1.y, 5 
	   00000103 R 05
						
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyBullet1, 1, enemyBulletPos1, ADDR count
 00000427  66| 83 3D		        cmp enemyBulletPos1.y, ScreenHeight-5 ; Check if enemy bullet is at the bottom of the screen
	   00000107 R 19
 0000042F  7E 14		        jle bulletdrop1
 00000431  66| C7 05		        mov enemyBulletPos1.x, 30 ; Reset enemyBullet1 position
	   00000105 R
	   001E
 0000043A  66| C7 05		        mov enemyBulletPos1.y, 5
	   00000107 R
	   0005
 00000443  EB 07		        jmp drawEnemy2
 00000445			        bulletdrop1:
 00000445  66| FF 05		        inc enemyBulletPos1.y ; Bullet drop
	   00000107 R

 0000044C			    drawEnemy2:
 0000044C  80 3D 00000122 R	        cmp enemyActive2, 0 ; Check if enemy is active
	   00
 00000453  0F 84 000000FE	        je drawEnemy3
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape2draw5, LENGTHOF enemyShape2draw5, enemyPos2, ADDR count
 00000476  66| FF 0D				dec enemyPos2.y
	   0000010B R
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape2draw4, LENGTHOF enemyShape2draw4, enemyPos2, ADDR count
 0000049A  66| FF 0D				dec enemyPos2.y
	   0000010B R
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape2draw3, LENGTHOF enemyShape2draw3, enemyPos2, ADDR count
 000004BE  66| FF 0D				dec enemyPos2.y
	   0000010B R
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape2draw2, LENGTHOF enemyShape2draw3, enemyPos2, ADDR count
 000004E2  66| FF 0D				dec enemyPos2.y
	   0000010B R
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape2draw1, LENGTHOF enemyShape2draw1, enemyPos2, ADDR count
 00000506  66| FF 0D				dec enemyPos2.y
	   0000010B R
 0000050D  66| 83 05				add enemyPos2.y, 5 
	   0000010B R 05
						
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyBullet2, 1, enemyBulletPos2, ADDR count
 00000532  66| 83 3D		        cmp enemyBulletPos2.y, ScreenHeight-5 ; Check if enemy bullet is at the bottom of the screen
	   0000010F R 19
 0000053A  7E 14		        jle bulletdrop2
 0000053C  66| C7 05		        mov enemyBulletPos2.x, 50 ; Reset enemyBullet2 position
	   0000010D R
	   0032
 00000545  66| C7 05		        mov enemyBulletPos2.y, 5
	   0000010F R
	   0005
 0000054E  EB 07		        jmp drawEnemy3
 00000550			        bulletdrop2:
 00000550  66| FF 05		        inc enemyBulletPos2.y ; Bullet drop
	   0000010F R
				     
<<<<<<< Updated upstream
 00000557			    drawEnemy3:
 00000557  80 3D 00000123 R	        cmp enemyActive3, 0 ; Check if enemy is active
=======
 00000391			    drawEnemy3:
 00000391  80 3D 00000123 R	        cmp enemyActive3, 0 ; Check if enemy is active
>>>>>>> Stashed changes
	   00
 0000055E  0F 84 000000FE	        je drawEnemy4
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape3draw5, LENGTHOF enemyShape3draw5, enemyPos3, ADDR count
 00000581  66| FF 0D				dec enemyPos3.y
	   00000113 R
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape3draw4, LENGTHOF enemyShape1draw3, enemyPos3, ADDR count
 000005A5  66| FF 0D				dec enemyPos3.y
	   00000113 R
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape3draw3, LENGTHOF enemyShape1draw3, enemyPos3, ADDR count
 000005C9  66| FF 0D				dec enemyPos3.y
	   00000113 R
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape3draw2, LENGTHOF enemyShape1draw3, enemyPos3, ADDR count
 000005ED  66| FF 0D				dec enemyPos3.y
	   00000113 R
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape3draw1, LENGTHOF enemyShape1draw3, enemyPos3, ADDR count
 00000611  66| FF 0D				dec enemyPos3.y
	   00000113 R
 00000618  66| 83 05				add enemyPos3.y, 5
	   00000113 R 05
						
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyBullet3, 1, enemyBulletPos3, ADDR count
 0000063D  66| 83 3D		        cmp enemyBulletPos3.y, ScreenHeight-5 ; Check if enemy bullet is at the bottom of the screen
	   00000117 R 19
 00000645  7E 14		        jle bulletdrop3
 00000647  66| C7 05		        mov enemyBulletPos3.x, 90 ; Reset enemyBullet3 position
	   00000115 R
	   005A
 00000650  66| C7 05		        mov enemyBulletPos3.y, 5
	   00000117 R
	   0005
 00000659  EB 07		        jmp drawEnemy4
 0000065B			        bulletdrop3:
 0000065B  66| FF 05		        inc enemyBulletPos3.y ; Bullet drop
	   00000117 R

 00000662			    drawEnemy4:
 00000662  80 3D 00000124 R	        cmp enemyActive4, 0 ; Check if enemy is active
	   00
 00000669  0F 84 000000FE	        je endDrawEnemies
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape4draw5, LENGTHOF enemyShape4draw5, enemyPos4, ADDR count
 0000068C  66| FF 0D				dec enemyPos4.y
	   0000011B R
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape4draw4, LENGTHOF enemyShape4draw4, enemyPos4, ADDR count
 000006B0  66| FF 0D				dec enemyPos4.y
	   0000011B R
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape4draw3, LENGTHOF enemyShape4draw3, enemyPos4, ADDR count
 000006D4  66| FF 0D				dec enemyPos4.y
	   0000011B R
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape4draw2, LENGTHOF enemyShape4draw3, enemyPos4, ADDR count
 000006F8  66| FF 0D				dec enemyPos4.y
	   0000011B R
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyShape4draw1, LENGTHOF enemyShape4draw1, enemyPos4, ADDR count
 0000071C  66| FF 0D				dec enemyPos4.y
	   0000011B R
 00000723  66| 83 05				add enemyPos4.y ,5
	   0000011B R 05
						
						INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR enemyBullet4, 1, enemyBulletPos4, ADDR count
 00000748  66| 83 3D		        cmp enemyBulletPos4.y, ScreenHeight-5 ; Check if enemy bullet is at the bottom of the screen
	   0000011F R 19
 00000750  7E 14		        jle bulletdrop4
 00000752  66| C7 05		        mov enemyBulletPos4.x, 110 ; Reset enemyBullet4 position
	   0000011D R
	   006E
 0000075B  66| C7 05		        mov enemyBulletPos4.y, 5
	   0000011F R
	   0005
 00000764  EB 07		        jmp endDrawEnemies
 00000766			        bulletdrop4:
 00000766  66| FF 05		        inc enemyBulletPos4.y ; Bullet drop
	   0000011F R

 0000076D			    endDrawEnemies:

				        ; Handle input
				        INVOKE GetAsyncKeyState, VK_LEFT
 00000774  66| A9 8000		        test ax, 8000h
 00000778  74 14		        jz checkRight
 0000077A  66| 83 3D		        cmp airplanePos.x, MarginSize ; If airplanePos.x is at the left edge of the screen, do not move right
	   00000038 R 0F
 00000782  7E 0A		        jle checkRight
 00000784  66| 83 2D		        sub airplanePos.x, 2
	   00000038 R 02
 0000078C  EB 21		        jmp checkShoot

 0000078E			    checkRight:
				        INVOKE GetAsyncKeyState, VK_RIGHT
 00000795  66| A9 8000		        test ax, 8000h
 00000799  74 14		        jz checkShoot
 0000079B  66| 83 3D		        cmp airplanePos.x, ScreenWidth - MarginSize; If airplanePos.x is at the right edge of the screen, do not move right
	   00000038 R 73
 000007A3  7D 0A		        jge checkShoot
 000007A5  66| 83 05		        add airplanePos.x, 2
	   00000038 R 02
 000007AD  EB 00		        jmp checkShoot
						
 000007AF				checkShoot:
				        INVOKE GetAsyncKeyState, VK_SPACE
 000007B6  66| A9 8000		        test ax, 8000h
 000007BA  74 2B		        jz updateBullet
 000007BC  66| 8B 1D		        mov bx, airplanePos.x
	   00000038 R
 000007C3  66| 83 C3 05		        add bx, 5 ; Adjust bullet position x
 000007C7  66| 89 1D		        mov bulletPos.x, bx
	   0000003C R
 000007CE  66| 8B 1D		        mov bx, airplanePos.y
	   0000003A R
 000007D5  66| 83 EB 03		        sub bx, 3 ; Adjust bullet position y
 000007D9  66| 89 1D		        mov bulletPos.y, bx
	   0000003E R
 000007E0  66| FF 0D		        dec bulletPos.y
	   0000003E R

 000007E7			    updateBullet:
				        ; Update bullet position
 000007E7  66| 83 3D		        cmp bulletPos.y, 0
	   0000003E R 00
 000007EF  74 07		        je endUpdate
 000007F1  66| FF 0D		        dec bulletPos.y
	   0000003E R
 000007F8			    endUpdate:

				        ; Delay for a short period
				        INVOKE Sleep, 50
				   
				    
					; Check if airplane is shot
 000007FF			    checkEnemyCollision1:    
 000007FF  80 3D 00000121 R	        cmp enemyActive1, 0 ; If equal, enemy1 already died
	   00
 00000806  74 48		        je checkEnemyCollision2
 00000808  66| 83 3D		       cmp enemyBulletPos1.y, ScreenHeight-5 ; Check1: enemyBullet.y and plane.y
	   00000107 R 19
 00000810  7C 3E		        jl checkEnemyCollision2 ; Bullet still up in sky, skip
 00000812  66| A1		        mov ax, airplanePos.x
	   00000038 R
 00000818  66| 83 E8 01		        sub ax, 1
 0000081C  66| 39 05		        cmp enemyBulletPos1.x, ax ; Check2: enemyBullet.x is between the range of plane.x
	   00000105 R
 00000823  7C 2B		        jl checkEnemyCollision2 ; skip
 00000825  66| A1		        mov ax, airplanePos.x
	   00000038 R
 0000082B  66| 83 C0 0A		        add ax, 10
 0000082F  66| 39 05		        cmp enemyBulletPos1.x, ax ; Check3: enemyBullet.x is between the range of plane.x
	   00000105 R
<<<<<<< Updated upstream
 00000836  7F 18		        jg checkEnemyCollision2 ; skip
 00000838  FF 0D 0000038E R	        dec life    ; If no skip, then collision happen
 0000083E  66| C7 05		        mov enemyBulletPos1.x, 30 ; Reset enemyBullet1 position
=======
 00000670  7F 18		        jg checkEnemyCollision2 ; skip
 00000672  FF 0D 00000268 R	        dec life    ; If no skip, then collision happen
 00000678  66| C7 05		        mov enemyBulletPos1.x, 30 ; Reset enemyBullet1 position
>>>>>>> Stashed changes
	   00000105 R
	   001E
 00000847  66| C7 05		        mov enemyBulletPos1.y, 5
	   00000107 R
	   0005
				  

 00000850			    checkEnemyCollision2:
 00000850  80 3D 00000122 R	    cmp enemyActive2, 0 ; If equal, enemy2 already died
	   00
 00000857  74 48		        je checkEnemyCollision3
 00000859  66| 83 3D		        cmp enemyBulletPos2.y, ScreenHeight-5 ; Check1: enemyBullet.y and plane.y
	   0000010F R 19
 00000861  7C 3E		        jl checkEnemyCollision3 ; Bullet still up in sky, skip
 00000863  66| A1		        mov ax, airplanePos.x
	   00000038 R
 00000869  66| 83 E8 01		        sub ax, 1
 0000086D  66| 39 05		        cmp enemyBulletPos2.x, ax ; Check2: enemyBullet.x is between the range of plane.x
	   0000010D R
 00000874  7C 2B		        jl checkEnemyCollision3 ; skip
 00000876  66| A1		        mov ax, airplanePos.x
	   00000038 R
 0000087C  66| 83 C0 0A		        add ax, 10
 00000880  66| 39 05		        cmp enemyBulletPos2.x, ax ; Check3: enemyBullet.x is between the range of plane.x
	   0000010D R
<<<<<<< Updated upstream
 00000887  7F 18		        jg checkEnemyCollision3 ; skip
 00000889  FF 0D 0000038E R	        dec life    ; If no skip, then collision happen
 0000088F  66| C7 05		        mov enemyBulletPos2.x, 50 ; Reset enemyBullet2 position
=======
 000006C1  7F 18		        jg checkEnemyCollision3 ; skip
 000006C3  FF 0D 00000268 R	        dec life    ; If no skip, then collision happen
 000006C9  66| C7 05		        mov enemyBulletPos2.x, 50 ; Reset enemyBullet2 position
>>>>>>> Stashed changes
	   0000010D R
	   0032
 00000898  66| C7 05		        mov enemyBulletPos2.y, 5
	   0000010F R
	   0005

 000008A1			    checkEnemyCollision3:
 000008A1  80 3D 00000123 R	    cmp enemyActive3, 0 ; If equal, enemy3 already died
	   00
 000008A8  74 48		        je checkEnemyCollision4
 000008AA  66| 83 3D		        cmp enemyBulletPos3.y, ScreenHeight-5 ; Check1: enemyBullet.y and plane.y
	   00000117 R 19
 000008B2  7C 3E		        jl checkEnemyCollision4 ; Bullet still up in sky, skip
 000008B4  66| A1		        mov ax, airplanePos.x
	   00000038 R
 000008BA  66| 83 E8 01		        sub ax, 1
 000008BE  66| 39 05		        cmp enemyBulletPos3.x, ax ; Check2: enemyBullet.x is between the range of plane.x
	   00000115 R
 000008C5  7C 2B		        jl checkEnemyCollision4 ; skip
 000008C7  66| A1		        mov ax, airplanePos.x
	   00000038 R
 000008CD  66| 83 C0 0A		        add ax, 10
 000008D1  66| 39 05		        cmp enemyBulletPos3.x, ax ; Check3: enemyBullet.x is between the range of plane.x
	   00000115 R
<<<<<<< Updated upstream
 000008D8  7F 18		        jg checkEnemyCollision4 ; skip
 000008DA  FF 0D 0000038E R	        dec life    ; If no skip, then collision happen
 000008E0  66| C7 05		        mov enemyBulletPos3.x, 90 ; Reset enemyBullet3 position
=======
 00000712  7F 18		        jg checkEnemyCollision4 ; skip
 00000714  FF 0D 00000268 R	        dec life    ; If no skip, then collision happen
 0000071A  66| C7 05		        mov enemyBulletPos3.x, 90 ; Reset enemyBullet3 position
>>>>>>> Stashed changes
	   00000115 R
	   005A
 000008E9  66| C7 05		        mov enemyBulletPos3.y, 5
	   00000117 R
	   0005

 000008F2			    checkEnemyCollision4:
 000008F2  80 3D 00000124 R	    cmp enemyActive4, 0 ; If equal, enemy4 already died
	   00
 000008F9  74 48		        je endEnemyCollision
 000008FB  66| 83 3D		        cmp enemyBulletPos4.y, ScreenHeight-5 ; Check1: enemyBullet.y and plane.y
	   0000011F R 19
 00000903  7C 3E		        jl endEnemyCollision ; Bullet still up in sky, skip
 00000905  66| A1		        mov ax, airplanePos.x
	   00000038 R
 0000090B  66| 83 E8 01		        sub ax, 1
 0000090F  66| 39 05		        cmp enemyBulletPos4.x, ax ; Check2: enemyBullet.x is between the range of plane.x
	   0000011D R
 00000916  7C 2B		        jl endEnemyCollision ; skip
 00000918  66| A1		        mov ax, airplanePos.x
	   00000038 R
 0000091E  66| 83 C0 0A		        add ax, 10
 00000922  66| 39 05		        cmp enemyBulletPos4.x, ax ; Check3: enemyBullet.x is between the range of plane.x
	   0000011D R
<<<<<<< Updated upstream
 00000929  7F 18		        jg endEnemyCollision ; skip
 0000092B  FF 0D 0000038E R	        dec life    ; If no skip, then collision happen
 00000931  66| C7 05		        mov enemyBulletPos4.x, 110 ; Reset enemyBullet4 position
=======
 00000763  7F 18		        jg endEnemyCollision ; skip
 00000765  FF 0D 00000268 R	        dec life    ; If no skip, then collision happen
 0000076B  66| C7 05		        mov enemyBulletPos4.x, 110 ; Reset enemyBullet4 position
>>>>>>> Stashed changes
	   0000011D R
	   006E
 0000093A  66| C7 05		        mov enemyBulletPos4.y, 5
	   0000011F R
	   0005
 00000943			    endEnemyCollision:
				              
				    
				    ;Check if enemy1 is shot
 00000943			    checkBulletCollision1:
 00000943  66| 83 3D		        cmp bulletPos.y, 5 ; If bullet is at the top of the screen, skip
	   0000003E R 05
 0000094B  75 2C		        jne checkBulletCollision2
 0000094D  B9 00000007		        mov ecx,7
 00000952  66| A1				mov ax, enemyPos1.x
	   00000101 R
 00000958					L1:
 00000958  66| 39 05					cmp bulletPos.x, ax ; Check1: bullet.x and enemy.x
	   0000003C R
 0000095F  74 06					je bulletHitEnemy1 ; skip
 00000961  66| 40					inc ax
 00000963  E2 F3					loop L1
 00000965  EB 12					jmp checkBulletCollision2
 00000967					bulletHitEnemy1:
 00000967  C6 05 00000121 R				mov enemyActive1, 0 ; If no skip, then collision happen, enemy2 died
	   00
 0000096E  66| C7 05					mov bulletPos.y, 0 ; Reset bullet position
	   0000003E R
	   0000
 00000977  EB 00					jmp checkBulletCollision2

				    ; Check if enemy2 is shot
 00000979			    checkBulletCollision2:
 00000979  66| 83 3D		        cmp bulletPos.y, 5 ; If bullet is at the top of the screen, skip
	   0000003E R 05
 00000981  75 2C		        jne checkBulletCollision3
 00000983  B9 00000007				mov ecx,7
 00000988  66| A1				mov ax, enemyPos2.x
	   00000109 R
 0000098E					L2:
 0000098E  66| 39 05					cmp bulletPos.x, ax ; Check1: bullet.x and enemy.x
	   0000003C R
 00000995  74 06					je bulletHitEnemy2 ; skip
 00000997  66| 40					inc ax
 00000999  E2 F3					loop L2
 0000099B  EB 12					jmp checkBulletCollision3
 0000099D					bulletHitEnemy2:
 0000099D  C6 05 00000122 R				mov enemyActive2, 0 ; If no skip, then collision happen, enemy2 died
	   00
 000009A4  66| C7 05					mov bulletPos.y, 0 ; Reset bullet position
	   0000003E R
	   0000
 000009AD  EB 00					jmp checkBulletCollision3

				    ; Check if enemy3 is shot
 000009AF			    checkBulletCollision3:
 000009AF  66| 83 3D		        cmp bulletPos.y, 5 ; If bullet is at the top of the screen, skip
	   0000003E R 05
 000009B7  75 2C		        jne checkBulletCollision4
 000009B9  B9 00000007		        mov ecx,7
 000009BE  66| A1				mov ax, enemyPos3.x
	   00000111 R
 000009C4					L3:
 000009C4  66| 39 05					cmp bulletPos.x, ax ; Check1: bullet.x and enemy.x
	   0000003C R
 000009CB  74 06					je bulletHitEnemy3 ; skip
 000009CD  66| 40					inc ax
 000009CF  E2 F3					loop L3
 000009D1  EB 12					jmp checkBulletCollision4
 000009D3					bulletHitEnemy3:
 000009D3  C6 05 00000123 R				mov enemyActive3, 0 ; If no skip, then collision happen, enemy2 died
	   00
 000009DA  66| C7 05					mov bulletPos.y, 0 ; Reset bullet position
	   0000003E R
	   0000
 000009E3  EB 00					jmp checkBulletCollision4
				     
				    ; Check if enemy4 is shot
 000009E5			    checkBulletCollision4:
 000009E5  66| 83 3D		        cmp bulletPos.y, 5 ; If bullet is at the top of the screen, skip
	   0000003E R 05
 000009ED  75 2C		        jne endBulletCollision
 000009EF  B9 00000007		        mov ecx,7
 000009F4  66| A1				mov ax, enemyPos4.x
	   00000119 R
 000009FA					L4:
 000009FA  66| 39 05					cmp bulletPos.x, ax ; Check1: bullet.x and enemy.x
	   0000003C R
 00000A01  74 06					je bulletHitEnemy4 ; skip
 00000A03  66| 40					inc ax
 00000A05  E2 F3					loop L4
 00000A07  EB 12					jmp endBulletCollision
 00000A09					bulletHitEnemy4:
 00000A09  C6 05 00000124 R				mov enemyActive4, 0 ; If no skip, then collision happen, enemy2 died
	   00
 00000A10  66| C7 05					mov bulletPos.y, 0 ; Reset bullet position
	   0000003E R
	   0000
 00000A19  EB 00					jmp endBulletCollision
 00000A1B			    endBulletCollision:

				     ; If lose
<<<<<<< Updated upstream
 00000A1B			    lose:
 00000A1B  83 3D 0000038E R	        cmp life, 0
	   00
 00000A22  0F 85 000000C1	        jne checkWin
=======
 00000855			    lose:
 00000855  83 3D 00000268 R	        cmp life, 0
	   00
 0000085C  0F 85 000000DD	        jne checkWin
>>>>>>> Stashed changes
				        ;;;TODO DRAW LOSE;;;
 00000A28  E8 00000000 E	        call Clrscr
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR loseDraw1, LENGTHOF loseDraw1, losePos, ADDR count
<<<<<<< Updated upstream
 00000A4A  66| FF 05		        inc losePos.y
	   000002EB R
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR loseDraw2, LENGTHOF loseDraw2, losePos, ADDR count
 00000A6E  66| FF 05		        inc losePos.y
	   000002EB R
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR loseDraw3, LENGTHOF loseDraw3, losePos, ADDR count
 00000A92  66| FF 05		        inc losePos.y
	   000002EB R
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR loseDraw4, LENGTHOF loseDraw4, losePos, ADDR count
 00000AB6  66| FF 05		        inc losePos.y
	   000002EB R
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR loseDraw5, LENGTHOF loseDraw5, losePos, ADDR count
				        INVOKE sleep, 5000
 00000AE4  E9 000000DD		        jmp exitGame


				    ; If win
 00000AE9			    checkWin:
 00000AE9  A0 00000121 R	        mov al, enemyActive1
 00000AEE  0A 05 00000122 R	        or al, enemyActive2
 00000AF4  0A 05 00000123 R	        or al, enemyActive3
 00000AFA  0A 05 00000124 R	        or al, enemyActive4
 00000B00  3C 00		        cmp al,0
 00000B02  0F 85 FFFFF6D9	        jne gameLoop
				   
				        ; Draw "WIN!"
 00000B08  E8 00000000 E	        call Clrscr
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR winDraw1, LENGTHOF winDraw1, winPos, ADDR count
 00000B2A  66| FF 05		        inc winPos.y
	   00000261 R
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR winDraw2, LENGTHOF winDraw2, winPos, ADDR count
 00000B4E  66| FF 05		        inc winPos.y
	   00000261 R
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR winDraw3, LENGTHOF winDraw3, winPos, ADDR count
 00000B72  66| FF 05		        inc winPos.y
	   00000261 R
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR winDraw4, LENGTHOF winDraw4, winPos, ADDR count
 00000B96  66| FF 05		        inc winPos.y
	   00000261 R
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR winDraw5, LENGTHOF winDraw5, winPos, ADDR count      
				        INVOKE Sleep, 5000
 00000BC4  EB 00		        jmp exitGame
				   
 00000BC6			    exitGame:
				        exit

 00000BCD			main ENDP
				END main
Microsoft (R) Macro Assembler Version 14.42.34435.0	    12/21/24 23:04:12
=======
 00000884  66| FF 05		        inc losePos.y
	   000001C5 R
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR loseDraw2, LENGTHOF loseDraw2, losePos, ADDR count
 000008A8  66| FF 05		        inc losePos.y
	   000001C5 R
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR loseDraw3, LENGTHOF loseDraw3, losePos, ADDR count
 000008CC  66| FF 05		        inc losePos.y
	   000001C5 R
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR loseDraw4, LENGTHOF loseDraw4, losePos, ADDR count
 000008F0  66| FF 05		        inc losePos.y
	   000001C5 R
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR loseDraw5, LENGTHOF loseDraw5, losePos, ADDR count
				        INVOKE sleep, 5000
 0000091E  66| 8D 15		        lea dx, playAgainPrompt
	   000001AF R
 00000925  E8 0000010E		        call displayPrompt  
 0000092A  3C 59		        cmp al, 'Y'         
 0000092C  0F 84 FFFFF6E9	        je gameloop      
 00000932  3C 79		        cmp al, 'y'          
 00000934  0F 84 FFFFF6E1	        je gameloop
 0000093A  E9 00000121		        jmp exitGame


				    ; If win
 0000093F			    checkWin:
 0000093F  A0 00000121 R	        mov al, enemyActive1
 00000944  0A 05 00000122 R	        or al, enemyActive2
 0000094A  0A 05 00000123 R	        or al, enemyActive3
 00000950  0A 05 00000124 R	        or al, enemyActive4
 00000956  3C 00		        cmp al,0
 00000958  0F 85 FFFFF6BD	        jne gameLoop
				   
				        ; Draw "WIN!"
 0000095E  E8 00000000 E	        call Clrscr
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR winDraw1, LENGTHOF winDraw1, winPos, ADDR count
 00000980  66| FF 05		        inc winPos.y
	   00000127 R
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR winDraw2, LENGTHOF winDraw2, winPos, ADDR count
 000009A4  66| FF 05		        inc winPos.y
	   00000127 R
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR winDraw3, LENGTHOF winDraw3, winPos, ADDR count
 000009C8  66| FF 05		        inc winPos.y
	   00000127 R
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR winDraw4, LENGTHOF winDraw4, winPos, ADDR count
 000009EC  66| FF 05		        inc winPos.y
	   00000127 R
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR winDraw5, LENGTHOF winDraw5, winPos, ADDR count      
				        INVOKE Sleep, 5000
 00000A1A  66| 8D 15		        lea dx, playAgainPrompt
	   000001AF R
 00000A21  E8 00000012		        call displayPrompt  
 00000A26  3C 59		        cmp al, 'Y'       
 00000A28  0F 84 FFFFF5ED	        je gameloop      
 00000A2E  3C 79		        cmp al, 'y'        
 00000A30  0F 84 FFFFF5E5	        je gameloop
 00000A36  EB 28		        jmp exitGame

 00000A38			    displayPrompt:
				        INVOKE WriteConsoleOutputCharacter, outputHandle, ADDR promptText, LENGTHOF promptText, promptPos, ADDR count
main.asm(495) : error A2006:undefined symbol : promptPos
main.asm(495) : error A2114:INVOKE argument type mismatch : argument : 4
main.asm(495) : error A2006:undefined symbol : promptText
main.asm(495) : error A2114:INVOKE argument type mismatch : argument : 3
main.asm(495) : error A2114:INVOKE argument type mismatch : argument : 2
				        INVOKE ReadConsoleInput, inputHandle, ADDR inputBuffer, 1, ADDR count
main.asm(496) : error A2006:undefined symbol : inputBuffer
main.asm(496) : error A2114:INVOKE argument type mismatch : argument : 2
main.asm(496) : error A2006:undefined symbol : inputHandle
main.asm(496) : error A2114:INVOKE argument type mismatch : argument : 1
				        mov al, inputBuffer.AsciiChar 
main.asm(497) : error A2006:undefined symbol : inputBuffer
 00000A54  C3			        ret
				   
 00000A60			    exitGame:
				        exit

 00000A67			main ENDP
				END main
Microsoft (R) Macro Assembler Version 14.42.34435.0	    12/21/24 22:51:49
>>>>>>> Stashed changes
main.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
<<<<<<< Updated upstream
_DATA  . . . . . . . . . . . . .	32 Bit	 000003A8 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000BCD Para	  Public  'CODE'	
=======
_DATA  . . . . . . . . . . . . .	32 Bit	 00000282 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000A67 Para	  Public  'CODE'	
>>>>>>> Stashed changes


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetAsyncKeyState . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleOutputCP . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
<<<<<<< Updated upstream
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000BCD Public STDCALL
  WaitForStart . . . . . . . . .	L Near	 000001B7 _TEXT	
  gameLoop . . . . . . . . . . .	L Near	 000001E1 _TEXT	
  drawlife3  . . . . . . . . . .	L Near	 00000201 _TEXT	
  drawlife2  . . . . . . . . . .	L Near	 00000220 _TEXT	
  drawlife1  . . . . . . . . . .	L Near	 0000023F _TEXT	
  drawAirplane . . . . . . . . .	L Near	 0000025E _TEXT	
  skipBullet . . . . . . . . . .	L Near	 00000341 _TEXT	
  drawenemy1 . . . . . . . . . .	L Near	 00000341 _TEXT	
  bulletdrop1  . . . . . . . . .	L Near	 00000445 _TEXT	
  drawEnemy2 . . . . . . . . . .	L Near	 0000044C _TEXT	
  bulletdrop2  . . . . . . . . .	L Near	 00000550 _TEXT	
  drawEnemy3 . . . . . . . . . .	L Near	 00000557 _TEXT	
  bulletdrop3  . . . . . . . . .	L Near	 0000065B _TEXT	
  drawEnemy4 . . . . . . . . . .	L Near	 00000662 _TEXT	
  bulletdrop4  . . . . . . . . .	L Near	 00000766 _TEXT	
  endDrawEnemies . . . . . . . .	L Near	 0000076D _TEXT	
  checkRight . . . . . . . . . .	L Near	 0000078E _TEXT	
  checkShoot . . . . . . . . . .	L Near	 000007AF _TEXT	
  updateBullet . . . . . . . . .	L Near	 000007E7 _TEXT	
  endUpdate  . . . . . . . . . .	L Near	 000007F8 _TEXT	
  checkEnemyCollision1 . . . . .	L Near	 000007FF _TEXT	
  checkEnemyCollision2 . . . . .	L Near	 00000850 _TEXT	
  checkEnemyCollision3 . . . . .	L Near	 000008A1 _TEXT	
  checkEnemyCollision4 . . . . .	L Near	 000008F2 _TEXT	
  endEnemyCollision  . . . . . .	L Near	 00000943 _TEXT	
  checkBulletCollision1  . . . .	L Near	 00000943 _TEXT	
  L1 . . . . . . . . . . . . . .	L Near	 00000958 _TEXT	
  bulletHitEnemy1  . . . . . . .	L Near	 00000967 _TEXT	
  checkBulletCollision2  . . . .	L Near	 00000979 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 0000098E _TEXT	
  bulletHitEnemy2  . . . . . . .	L Near	 0000099D _TEXT	
  checkBulletCollision3  . . . .	L Near	 000009AF _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 000009C4 _TEXT	
  bulletHitEnemy3  . . . . . . .	L Near	 000009D3 _TEXT	
  checkBulletCollision4  . . . .	L Near	 000009E5 _TEXT	
  L4 . . . . . . . . . . . . . .	L Near	 000009FA _TEXT	
  bulletHitEnemy4  . . . . . . .	L Near	 00000A09 _TEXT	
  endBulletCollision . . . . . .	L Near	 00000A1B _TEXT	
  lose . . . . . . . . . . . . .	L Near	 00000A1B _TEXT	
  checkWin . . . . . . . . . . .	L Near	 00000AE9 _TEXT	
  exitGame . . . . . . . . . . .	L Near	 00000BC6 _TEXT	
=======
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000A67 Public STDCALL
  gameLoop . . . . . . . . . . .	L Near	 0000001B _TEXT	
  drawlife3  . . . . . . . . . .	L Near	 0000003B _TEXT	
  drawlife2  . . . . . . . . . .	L Near	 0000005A _TEXT	
  drawlife1  . . . . . . . . . .	L Near	 00000079 _TEXT	
  drawAirplane . . . . . . . . .	L Near	 00000098 _TEXT	
  skipBullet . . . . . . . . . .	L Near	 0000017B _TEXT	
  drawenemy1 . . . . . . . . . .	L Near	 0000017B _TEXT	
  bulletdrop1  . . . . . . . . .	L Near	 0000027F _TEXT	
  drawEnemy2 . . . . . . . . . .	L Near	 00000286 _TEXT	
  bulletdrop2  . . . . . . . . .	L Near	 0000038A _TEXT	
  drawEnemy3 . . . . . . . . . .	L Near	 00000391 _TEXT	
  bulletdrop3  . . . . . . . . .	L Near	 00000495 _TEXT	
  drawEnemy4 . . . . . . . . . .	L Near	 0000049C _TEXT	
  bulletdrop4  . . . . . . . . .	L Near	 000005A0 _TEXT	
  endDrawEnemies . . . . . . . .	L Near	 000005A7 _TEXT	
  checkRight . . . . . . . . . .	L Near	 000005C8 _TEXT	
  checkShoot . . . . . . . . . .	L Near	 000005E9 _TEXT	
  updateBullet . . . . . . . . .	L Near	 00000621 _TEXT	
  endUpdate  . . . . . . . . . .	L Near	 00000632 _TEXT	
  checkEnemyCollision1 . . . . .	L Near	 00000639 _TEXT	
  checkEnemyCollision2 . . . . .	L Near	 0000068A _TEXT	
  checkEnemyCollision3 . . . . .	L Near	 000006DB _TEXT	
  checkEnemyCollision4 . . . . .	L Near	 0000072C _TEXT	
  endEnemyCollision  . . . . . .	L Near	 0000077D _TEXT	
  checkBulletCollision1  . . . .	L Near	 0000077D _TEXT	
  L1 . . . . . . . . . . . . . .	L Near	 00000792 _TEXT	
  bulletHitEnemy1  . . . . . . .	L Near	 000007A1 _TEXT	
  checkBulletCollision2  . . . .	L Near	 000007B3 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 000007C8 _TEXT	
  bulletHitEnemy2  . . . . . . .	L Near	 000007D7 _TEXT	
  checkBulletCollision3  . . . .	L Near	 000007E9 _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 000007FE _TEXT	
  bulletHitEnemy3  . . . . . . .	L Near	 0000080D _TEXT	
  checkBulletCollision4  . . . .	L Near	 0000081F _TEXT	
  L4 . . . . . . . . . . . . . .	L Near	 00000834 _TEXT	
  bulletHitEnemy4  . . . . . . .	L Near	 00000843 _TEXT	
  endBulletCollision . . . . . .	L Near	 00000855 _TEXT	
  lose . . . . . . . . . . . . .	L Near	 00000855 _TEXT	
  checkWin . . . . . . . . . . .	L Near	 0000093F _TEXT	
  displayPrompt  . . . . . . . .	L Near	 00000A38 _TEXT	
  exitGame . . . . . . . . . . .	L Near	 00000A60 _TEXT	
>>>>>>> Stashed changes
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MarginSize . . . . . . . . . . .	Number	 0000000Fh   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
ScreenHeight . . . . . . . . . .	Number	 0000001Eh   
ScreenWidth  . . . . . . . . . .	Number	 00000082h   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
airplaneDraw1  . . . . . . . . .	Byte	 00000000 _DATA	
airplaneDraw2  . . . . . . . . .	Byte	 00000008 _DATA	
airplaneDraw3  . . . . . . . . .	Byte	 00000013 _DATA	
airplaneDraw4  . . . . . . . . .	Byte	 00000020 _DATA	
airplaneDraw5  . . . . . . . . .	Byte	 00000029 _DATA	
airplanePos  . . . . . . . . . .	COORD	 00000038 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
bulletPos  . . . . . . . . . . .	COORD	 0000003C _DATA	
bullet . . . . . . . . . . . . .	Byte	 00000033 _DATA	
<<<<<<< Updated upstream
bytesWritten . . . . . . . . . .	DWord	 00000382 _DATA	
count  . . . . . . . . . . . . .	DWord	 0000038A _DATA	
=======
bytesWritten . . . . . . . . . .	DWord	 0000025C _DATA	
count  . . . . . . . . . . . . .	DWord	 00000264 _DATA	
>>>>>>> Stashed changes
cyan . . . . . . . . . . . . . .	Number	 00000003h   
enemyActive1 . . . . . . . . . .	Byte	 00000121 _DATA	
enemyActive2 . . . . . . . . . .	Byte	 00000122 _DATA	
enemyActive3 . . . . . . . . . .	Byte	 00000123 _DATA	
enemyActive4 . . . . . . . . . .	Byte	 00000124 _DATA	
enemyBullet1 . . . . . . . . . .	Byte	 000000FD _DATA	
enemyBullet2 . . . . . . . . . .	Byte	 000000FE _DATA	
enemyBullet3 . . . . . . . . . .	Byte	 000000FF _DATA	
enemyBullet4 . . . . . . . . . .	Byte	 00000100 _DATA	
enemyBulletPos1  . . . . . . . .	COORD	 00000105 _DATA	
enemyBulletPos2  . . . . . . . .	COORD	 0000010D _DATA	
enemyBulletPos3  . . . . . . . .	COORD	 00000115 _DATA	
enemyBulletPos4  . . . . . . . .	COORD	 0000011D _DATA	
enemyPos1  . . . . . . . . . . .	COORD	 00000101 _DATA	
enemyPos2  . . . . . . . . . . .	COORD	 00000109 _DATA	
enemyPos3  . . . . . . . . . . .	COORD	 00000111 _DATA	
enemyPos4  . . . . . . . . . . .	COORD	 00000119 _DATA	
enemyShape1draw1 . . . . . . . .	Byte	 00000040 _DATA	
enemyShape1draw2 . . . . . . . .	Byte	 00000048 _DATA	
enemyShape1draw3 . . . . . . . .	Byte	 00000051 _DATA	
enemyShape1draw4 . . . . . . . .	Byte	 0000005A _DATA	
enemyShape1draw5 . . . . . . . .	Byte	 00000063 _DATA	
enemyShape2draw1 . . . . . . . .	Byte	 0000006C _DATA	
enemyShape2draw2 . . . . . . . .	Byte	 00000074 _DATA	
enemyShape2draw3 . . . . . . . .	Byte	 0000007E _DATA	
enemyShape2draw4 . . . . . . . .	Byte	 00000088 _DATA	
enemyShape2draw5 . . . . . . . .	Byte	 00000092 _DATA	
enemyShape3draw1 . . . . . . . .	Byte	 0000009A _DATA	
enemyShape3draw2 . . . . . . . .	Byte	 000000A4 _DATA	
enemyShape3draw3 . . . . . . . .	Byte	 000000AE _DATA	
enemyShape3draw4 . . . . . . . .	Byte	 000000B9 _DATA	
enemyShape3draw5 . . . . . . . .	Byte	 000000C3 _DATA	
enemyShape4draw1 . . . . . . . .	Byte	 000000CC _DATA	
enemyShape4draw2 . . . . . . . .	Byte	 000000D5 _DATA	
enemyShape4draw3 . . . . . . . .	Byte	 000000DF _DATA	
enemyShape4draw4 . . . . . . . .	Byte	 000000E9 _DATA	
enemyShape4draw5 . . . . . . . .	Byte	 000000F3 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
initialAirplanePos . . . . . . .	COORD	 00000034 _DATA	
<<<<<<< Updated upstream
lifePos  . . . . . . . . . . . .	COORD	 000003A4 _DATA	
lifeSymbol1  . . . . . . . . . .	Byte	 00000392 _DATA	
lifeSymbol2  . . . . . . . . . .	Byte	 00000397 _DATA	
lifeSymbol3  . . . . . . . . . .	Byte	 0000039D _DATA	
life . . . . . . . . . . . . . .	DWord	 0000038E _DATA	
=======
lifePos  . . . . . . . . . . . .	COORD	 0000027E _DATA	
lifeSymbol1  . . . . . . . . . .	Byte	 0000026C _DATA	
lifeSymbol2  . . . . . . . . . .	Byte	 00000271 _DATA	
lifeSymbol3  . . . . . . . . . .	Byte	 00000277 _DATA	
life . . . . . . . . . . . . . .	DWord	 00000268 _DATA	
>>>>>>> Stashed changes
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
<<<<<<< Updated upstream
loseDraw1  . . . . . . . . . . .	Byte	 000002ED _DATA	
loseDraw2  . . . . . . . . . . .	Byte	 0000030A _DATA	
loseDraw3  . . . . . . . . . . .	Byte	 00000327 _DATA	
loseDraw4  . . . . . . . . . . .	Byte	 00000344 _DATA	
loseDraw5  . . . . . . . . . . .	Byte	 00000361 _DATA	
losePos  . . . . . . . . . . . .	COORD	 000002E9 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
outputHandle . . . . . . . . . .	DWord	 0000037E _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
screenBuffer . . . . . . . . . .	COORD	 00000386 _DATA	
startEnemy1  . . . . . . . . . .	Byte	 00000157 _DATA	
startEnemy2  . . . . . . . . . .	Byte	 0000016D _DATA	
startEnemy3  . . . . . . . . . .	Byte	 0000018B _DATA	
startEnemy4  . . . . . . . . . .	Byte	 000001AB _DATA	
startEnemy6  . . . . . . . . . .	Byte	 000001EC _DATA	
startEnemy7  . . . . . . . . . .	Byte	 0000020A _DATA	
startEnemy8  . . . . . . . . . .	Byte	 00000226 _DATA	
startEnemyPos  . . . . . . . . .	COORD	 0000014F _DATA	
startEnemyface1  . . . . . . . .	Byte	 000001CC _DATA	
startEnemyface2  . . . . . . . .	Byte	 0000023F _DATA	
startEnemyfacePos  . . . . . . .	COORD	 00000153 _DATA	
startMessage1  . . . . . . . . .	Byte	 00000129 _DATA	
startMessage2  . . . . . . . . .	Byte	 0000013C _DATA	
startPos . . . . . . . . . . . .	COORD	 00000125 _DATA	
=======
loseDraw1  . . . . . . . . . . .	Byte	 000001C7 _DATA	
loseDraw2  . . . . . . . . . . .	Byte	 000001E4 _DATA	
loseDraw3  . . . . . . . . . . .	Byte	 00000201 _DATA	
loseDraw4  . . . . . . . . . . .	Byte	 0000021E _DATA	
loseDraw5  . . . . . . . . . . .	Byte	 0000023B _DATA	
losePos  . . . . . . . . . . . .	COORD	 000001C3 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
outputHandle . . . . . . . . . .	DWord	 00000258 _DATA	
playAgainPrompt  . . . . . . . .	Byte	 000001AF _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
screenBuffer . . . . . . . . . .	COORD	 00000260 _DATA	
>>>>>>> Stashed changes
white  . . . . . . . . . . . . .	Number	 0000000Fh   
winDraw1 . . . . . . . . . . . .	Byte	 00000263 _DATA	
winDraw2 . . . . . . . . . . . .	Byte	 0000027D _DATA	
winDraw3 . . . . . . . . . . . .	Byte	 00000298 _DATA	
winDraw4 . . . . . . . . . . . .	Byte	 000002B3 _DATA	
winDraw5 . . . . . . . . . . . .	Byte	 000002CE _DATA	
winPos . . . . . . . . . . . . .	COORD	 0000025F _DATA	
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   11 Errors
